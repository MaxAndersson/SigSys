
SigSys.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000016c0  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80003800  80003800  00003c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000001d0  80003a00  80003a00  00003e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000c18  00000008  80003bd0  00004008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000e128  00000c20  00000c20  00000000  2**2
                  ALLOC
  8 .heap         000002b8  0000ed48  0000ed48  00000000  2**0
                  ALLOC
  9 .comment      00000053  00000000  00000000  00004c20  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000908  00000000  00000000  00004c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00001753  00000000  00000000  00005580  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0001082e  00000000  00000000  00006cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ec8  00000000  00000000  00017501  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000077db  00000000  00000000  000193c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000015a0  00000000  00000000  00020ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000034ad  00000000  00000000  00022144  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000334e  00000000  00000000  000255f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 00e3ca79  00000000  00000000  0002893f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 000008c0  00000000  00000000  00e653b8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf d3 1c 	sub	pc,pc,-11492

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf f3 20 	sub	pc,pc,-3296

Disassembly of section .text:

80002008 <board_init>:
80002008:	d4 01       	pushm	lr
8000200a:	20 4d       	sub	sp,16



void board_init (void)
{
    gpio_configure_pin(LED0_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000200c:	30 3b       	mov	r11,3
8000200e:	32 3c       	mov	r12,35
80002010:	f0 1f 00 15 	mcall	80002064 <board_init+0x5c>
    gpio_configure_pin(LED1_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002014:	30 3b       	mov	r11,3
80002016:	34 9c       	mov	r12,73
80002018:	f0 1f 00 13 	mcall	80002064 <board_init+0x5c>
    gpio_configure_pin(LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000201c:	30 3b       	mov	r11,3
8000201e:	32 2c       	mov	r12,34
80002020:	f0 1f 00 11 	mcall	80002064 <board_init+0x5c>
    gpio_configure_pin(LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002024:	30 3b       	mov	r11,3
80002026:	32 6c       	mov	r12,38
80002028:	f0 1f 00 0f 	mcall	80002064 <board_init+0x5c>

    gpio_configure_pin(GPIO_PUSH_BUTTON_0, (GPIO_DIR_INPUT | GPIO_PULL_UP));
8000202c:	30 4b       	mov	r11,4
8000202e:	32 1c       	mov	r12,33
80002030:	f0 1f 00 0d 	mcall	80002064 <board_init+0x5c>
    /* TWI Master GPIO pin configuration. */
    const gpio_map_t TWI_GPIO_MAP =
		{
			{TWIMS0_TWD_PIN,  TWIMS0_TWD_FUNCTION  },
			{TWIMS0_TWCK_PIN, TWIMS0_TWCK_FUNCTION }
		};
80002034:	48 d8       	lddpc	r8,80002068 <board_init+0x60>
80002036:	1a 9c       	mov	r12,sp
80002038:	f0 ea 00 00 	ld.d	r10,r8[0]
8000203c:	fa eb 00 00 	st.d	sp[0],r10
80002040:	f0 e8 00 08 	ld.d	r8,r8[8]
80002044:	fa e9 00 08 	st.d	sp[8],r8
    gpio_enable_module(TWI_GPIO_MAP,
80002048:	30 2b       	mov	r11,2
8000204a:	f0 1f 00 09 	mcall	8000206c <board_init+0x64>
	static const gpio_map_t COMPORT_GPIO_MAP =
		{
			{USART_RXD_PIN, USART_RXD_FUNCTION },
			{USART_TXD_PIN, USART_TXD_FUNCTION }
		};
	gpio_enable_module(COMPORT_GPIO_MAP,
8000204e:	30 2b       	mov	r11,2
80002050:	48 8c       	lddpc	r12,80002070 <board_init+0x68>
80002052:	f0 1f 00 07 	mcall	8000206c <board_init+0x64>
# define AT45DBX_ENABLE_NPCS_PIN(NPCS, unused) \
	{AT45DBX_SPI_NPCS##NPCS##_PIN, AT45DBX_SPI_NPCS##NPCS##_FUNCTION},
	MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
# undef AT45DBX_ENABLE_NPCS_PIN
	};
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
80002056:	30 4b       	mov	r11,4
80002058:	48 7c       	lddpc	r12,80002074 <board_init+0x6c>
8000205a:	f0 1f 00 05 	mcall	8000206c <board_init+0x64>
			sizeof(SD_MMC_MCI_GPIO_MAP) / sizeof(SD_MMC_MCI_GPIO_MAP[0]));
	gpio_enable_pin_pull_up(SD_SLOT_8BITS_CARD_DETECT);
	gpio_enable_pin_pull_up(SD_SLOT_8BITS_WRITE_PROTECT);
#endif

}
8000205e:	2f cd       	sub	sp,-16
80002060:	d8 02       	popm	pc
80002062:	00 00       	add	r0,r0
80002064:	80 00       	ld.sh	r0,r0[0x0]
80002066:	22 34       	sub	r4,35
80002068:	80 00       	ld.sh	r0,r0[0x0]
8000206a:	3a 30       	mov	r0,-93
8000206c:	80 00       	ld.sh	r0,r0[0x0]
8000206e:	21 ec       	sub	r12,30
80002070:	80 00       	ld.sh	r0,r0[0x0]
80002072:	3a 00       	mov	r0,-96
80002074:	80 00       	ld.sh	r0,r0[0x0]
80002076:	3a 10       	mov	r0,-95

80002078 <abdac_enable>:
#include "abdac.h"

void abdac_enable(volatile avr32_abdac_t *abdac)
{
  volatile avr32_pm_t *pm = &AVR32_PM;
  pm->gcctrl[ABDAC_GCLK] |= GCLK_BIT(CEN);
80002078:	fe 78 0c 00 	mov	r8,-62464
8000207c:	71 d9       	ld.w	r9,r8[0x74]
8000207e:	a3 a9       	sbr	r9,0x2
80002080:	f1 49 00 74 	st.w	r8[116],r9
  abdac->cr |= (unsigned int) ABDAC_BIT(CR_EN);
80002084:	78 28       	ld.w	r8,r12[0x8]
80002086:	bf b8       	sbr	r8,0x1f
80002088:	99 28       	st.w	r12[0x8],r8
}
8000208a:	5e fc       	retal	r12

8000208c <abdac_set_dac_hz>:
{
  volatile avr32_pm_t *pm = &AVR32_PM;
  unsigned short div;

  // Use OSC0
  pm->GCCTRL[ABDAC_GCLK].pllsel=0;// Oscillator source
8000208c:	fe 78 0c 00 	mov	r8,-62464
80002090:	71 d9       	ld.w	r9,r8[0x74]
80002092:	30 0c       	mov	r12,0
80002094:	f3 dc d0 21 	bfins	r9,r12,0x1,0x1
80002098:	f1 49 00 74 	st.w	r8[116],r9
  pm->GCCTRL[ABDAC_GCLK].oscsel=0;// OSC0
8000209c:	71 d9       	ld.w	r9,r8[0x74]
8000209e:	f3 dc d0 01 	bfins	r9,r12,0x0,0x1
800020a2:	f1 49 00 74 	st.w	r8[116],r9

  if (bus_hz < (256 * dac_hz)) {
800020a6:	a9 6a       	lsl	r10,0x8
800020a8:	16 3a       	cp.w	r10,r11
800020aa:	e0 88 00 09 	brls	800020bc <abdac_set_dac_hz+0x30>
    // Disable diven to get the highest sample rate
    pm->GCCTRL[ABDAC_GCLK].diven=0;
800020ae:	71 d9       	ld.w	r9,r8[0x74]
800020b0:	f3 dc d0 81 	bfins	r9,r12,0x4,0x1
800020b4:	f1 49 00 74 	st.w	r8[116],r9
800020b8:	31 6c       	mov	r12,22
    return EINVAL;
800020ba:	5e fc       	retal	r12
  }

  div = bus_hz / (256 * dac_hz);
800020bc:	f6 0a 0d 08 	divu	r8,r11,r10
800020c0:	5c 88       	casts.h	r8

  if (div > 1) {
800020c2:	30 19       	mov	r9,1
800020c4:	f2 08 19 00 	cp.h	r8,r9
800020c8:	e0 88 00 14 	brls	800020f0 <abdac_set_dac_hz+0x64>
    // Enable DIV
    pm->GCCTRL[ABDAC_GCLK].div= (div / 2) - 1;
800020cc:	f9 d8 c0 2f 	bfextu	r12,r8,0x1,0xf
800020d0:	20 1c       	sub	r12,1
800020d2:	5c 5c       	castu.b	r12
800020d4:	fe 79 0c 00 	mov	r9,-62464
800020d8:	73 da       	ld.w	r10,r9[0x74]
800020da:	f5 dc d1 08 	bfins	r10,r12,0x8,0x8
800020de:	f3 4a 00 74 	st.w	r9[116],r10
    pm->GCCTRL[ABDAC_GCLK].diven=1;
800020e2:	73 da       	ld.w	r10,r9[0x74]
800020e4:	30 1c       	mov	r12,1
800020e6:	f5 dc d0 81 	bfins	r10,r12,0x4,0x1
800020ea:	f3 4a 00 74 	st.w	r9[116],r10
800020ee:	c0 98       	rjmp	80002100 <abdac_set_dac_hz+0x74>
  } else {
    // Disable DIV
    pm->GCCTRL[ABDAC_GCLK].diven=0;
800020f0:	fe 79 0c 00 	mov	r9,-62464
800020f4:	73 da       	ld.w	r10,r9[0x74]
800020f6:	30 0c       	mov	r12,0
800020f8:	f5 dc d0 81 	bfins	r10,r12,0x4,0x1
800020fc:	f3 4a 00 74 	st.w	r9[116],r10
  }

  return (bus_hz / (256 * div));
80002100:	5c 78       	castu.h	r8
80002102:	a9 68       	lsl	r8,0x8
80002104:	f6 08 0d 0a 	divu	r10,r11,r8
80002108:	5e fa       	retal	r10

8000210a <adc_configure>:
	adc->mr |= 1 << AVR32_ADC_LOWRES_OFFSET;
#endif

	/* Set Sample/Hold time to max so that the ADC capacitor should be
	 * loaded entirely */
	adc->mr |= 0xF << AVR32_ADC_SHTIM_OFFSET;
8000210a:	78 18       	ld.w	r8,r12[0x4]
8000210c:	ea 18 0f 00 	orh	r8,0xf00
80002110:	99 18       	st.w	r12[0x4],r8

	/* Set Startup to max so that the ADC capacitor should be loaded
	 * entirely */
	adc->mr |= 0x1F << AVR32_ADC_STARTUP_OFFSET;
80002112:	78 18       	ld.w	r8,r12[0x4]
80002114:	ea 18 00 1f 	orh	r8,0x1f
80002118:	99 18       	st.w	r12[0x4],r8
}
8000211a:	5e fc       	retal	r12

8000211c <adc_enable>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
8000211c:	30 18       	mov	r8,1
8000211e:	f0 0b 09 48 	lsl	r8,r8,r11
80002122:	99 48       	st.w	r12[0x10],r8
}
80002124:	5e fc       	retal	r12

80002126 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002126:	fe 68 14 00 	mov	r8,-125952
8000212a:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
8000212c:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80002130:	91 09       	st.w	r8[0x0],r9
}
80002132:	5e fc       	retal	r12

80002134 <flashc_is_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80002134:	fe 68 14 00 	mov	r8,-125952
80002138:	70 2c       	ld.w	r12,r8[0x8]
}
8000213a:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000213e:	5e fc       	retal	r12

80002140 <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80002140:	d4 01       	pushm	lr
	while (!flashc_is_ready());
80002142:	f0 1f 00 03 	mcall	8000214c <flashc_default_wait_until_ready+0xc>
80002146:	cf e0       	breq	80002142 <flashc_default_wait_until_ready+0x2>
}
80002148:	d8 02       	popm	pc
8000214a:	00 00       	add	r0,r0
8000214c:	80 00       	ld.sh	r0,r0[0x0]
8000214e:	21 34       	sub	r4,19

80002150 <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80002150:	eb cd 40 c0 	pushm	r6-r7,lr
80002154:	18 96       	mov	r6,r12
80002156:	16 97       	mov	r7,r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80002158:	48 e8       	lddpc	r8,80002190 <flashc_issue_command+0x40>
8000215a:	70 08       	ld.w	r8,r8[0x0]
8000215c:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8000215e:	fe 68 14 00 	mov	r8,-125952
80002162:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80002164:	f1 d6 d0 06 	bfins	r8,r6,0x0,0x6
	if (page_number >= 0) {
80002168:	58 07       	cp.w	r7,0
8000216a:	c0 35       	brlt	80002170 <flashc_issue_command+0x20>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
8000216c:	f1 d7 d1 10 	bfins	r8,r7,0x8,0x10
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80002170:	3a 59       	mov	r9,-91
80002172:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80002176:	fe 69 14 00 	mov	r9,-125952
8000217a:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
8000217c:	72 29       	ld.w	r9,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
8000217e:	e2 19 00 0c 	andl	r9,0xc,COH
80002182:	48 58       	lddpc	r8,80002194 <flashc_issue_command+0x44>
80002184:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
80002186:	48 38       	lddpc	r8,80002190 <flashc_issue_command+0x40>
80002188:	70 08       	ld.w	r8,r8[0x0]
8000218a:	5d 18       	icall	r8
}
8000218c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002190:	00 00       	add	r0,r0
80002192:	00 08       	add	r8,r0
80002194:	00 00       	add	r0,r0
80002196:	0c 20       	rsub	r0,r6

80002198 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002198:	f8 08 16 05 	lsr	r8,r12,0x5
8000219c:	a9 68       	lsl	r8,0x8
8000219e:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
800021a2:	58 1b       	cp.w	r11,1
800021a4:	c0 d0       	breq	800021be <gpio_enable_module_pin+0x26>
800021a6:	c0 63       	brcs	800021b2 <gpio_enable_module_pin+0x1a>
800021a8:	58 2b       	cp.w	r11,2
800021aa:	c1 00       	breq	800021ca <gpio_enable_module_pin+0x32>
800021ac:	58 3b       	cp.w	r11,3
800021ae:	c1 40       	breq	800021d6 <gpio_enable_module_pin+0x3e>
800021b0:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800021b2:	30 19       	mov	r9,1
800021b4:	f2 0c 09 49 	lsl	r9,r9,r12
800021b8:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800021ba:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800021bc:	c1 28       	rjmp	800021e0 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800021be:	30 19       	mov	r9,1
800021c0:	f2 0c 09 49 	lsl	r9,r9,r12
800021c4:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800021c6:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800021c8:	c0 c8       	rjmp	800021e0 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800021ca:	30 19       	mov	r9,1
800021cc:	f2 0c 09 49 	lsl	r9,r9,r12
800021d0:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800021d2:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800021d4:	c0 68       	rjmp	800021e0 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800021d6:	30 19       	mov	r9,1
800021d8:	f2 0c 09 49 	lsl	r9,r9,r12
800021dc:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800021de:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800021e0:	30 19       	mov	r9,1
800021e2:	f2 0c 09 4c 	lsl	r12,r9,r12
800021e6:	91 2c       	st.w	r8[0x8],r12
800021e8:	5e fd       	retal	0
800021ea:	d7 03       	nop

800021ec <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800021ec:	d4 21       	pushm	r4-r7,lr
800021ee:	18 97       	mov	r7,r12
800021f0:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800021f2:	58 0b       	cp.w	r11,0
800021f4:	c0 31       	brne	800021fa <gpio_enable_module+0xe>
800021f6:	30 05       	mov	r5,0
800021f8:	c0 d8       	rjmp	80002212 <gpio_enable_module+0x26>
800021fa:	30 05       	mov	r5,0
800021fc:	0a 96       	mov	r6,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800021fe:	6e 1b       	ld.w	r11,r7[0x4]
80002200:	6e 0c       	ld.w	r12,r7[0x0]
80002202:	f0 1f 00 06 	mcall	80002218 <gpio_enable_module+0x2c>
80002206:	18 45       	or	r5,r12
		gpiomap++;
80002208:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000220a:	2f f6       	sub	r6,-1
8000220c:	0c 34       	cp.w	r4,r6
8000220e:	fe 9b ff f8 	brhi	800021fe <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80002212:	0a 9c       	mov	r12,r5
80002214:	d8 22       	popm	r4-r7,pc
80002216:	00 00       	add	r0,r0
80002218:	80 00       	ld.sh	r0,r0[0x0]
8000221a:	21 98       	sub	r8,25

8000221c <gpio_enable_gpio_pin>:
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000221c:	f8 08 16 05 	lsr	r8,r12,0x5
80002220:	a9 68       	lsl	r8,0x8
80002222:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->oderc = 1 << (pin & 0x1F);
80002226:	30 19       	mov	r9,1
80002228:	f2 0c 09 4c 	lsl	r12,r9,r12
8000222c:	f1 4c 00 48 	st.w	r8[72],r12
	gpio_port->gpers = 1 << (pin & 0x1F);
80002230:	91 1c       	st.w	r8[0x4],r12
}
80002232:	5e fc       	retal	r12

80002234 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002234:	f8 08 16 05 	lsr	r8,r12,0x5
80002238:	a9 68       	lsl	r8,0x8
8000223a:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
8000223e:	16 99       	mov	r9,r11
80002240:	e2 19 00 04 	andl	r9,0x4,COH
80002244:	c0 70       	breq	80002252 <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
80002246:	30 19       	mov	r9,1
80002248:	f2 0c 09 49 	lsl	r9,r9,r12
8000224c:	f1 49 00 74 	st.w	r8[116],r9
80002250:	c0 68       	rjmp	8000225c <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80002252:	30 19       	mov	r9,1
80002254:	f2 0c 09 49 	lsl	r9,r9,r12
80002258:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
8000225c:	16 99       	mov	r9,r11
8000225e:	e2 19 00 80 	andl	r9,0x80,COH
80002262:	c2 40       	breq	800022aa <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
80002264:	16 99       	mov	r9,r11
80002266:	e2 19 01 80 	andl	r9,0x180,COH
8000226a:	c0 90       	breq	8000227c <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
8000226c:	30 19       	mov	r9,1
8000226e:	f2 0c 09 49 	lsl	r9,r9,r12
80002272:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002276:	f1 49 00 b8 	st.w	r8[184],r9
8000227a:	c1 88       	rjmp	800022aa <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
8000227c:	16 99       	mov	r9,r11
8000227e:	e2 19 02 80 	andl	r9,0x280,COH
80002282:	c0 90       	breq	80002294 <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002284:	30 19       	mov	r9,1
80002286:	f2 0c 09 49 	lsl	r9,r9,r12
8000228a:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000228e:	f1 49 00 b8 	st.w	r8[184],r9
80002292:	c0 c8       	rjmp	800022aa <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
80002294:	16 99       	mov	r9,r11
80002296:	e2 19 03 80 	andl	r9,0x380,COH
8000229a:	c0 80       	breq	800022aa <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
8000229c:	30 19       	mov	r9,1
8000229e:	f2 0c 09 49 	lsl	r9,r9,r12
800022a2:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
800022a6:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
800022aa:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
800022ae:	c1 50       	breq	800022d8 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
800022b0:	e2 1b 00 02 	andl	r11,0x2,COH
800022b4:	c0 70       	breq	800022c2 <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
800022b6:	30 19       	mov	r9,1
800022b8:	f2 0c 09 49 	lsl	r9,r9,r12
800022bc:	f1 49 00 54 	st.w	r8[84],r9
800022c0:	c0 68       	rjmp	800022cc <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
800022c2:	30 19       	mov	r9,1
800022c4:	f2 0c 09 49 	lsl	r9,r9,r12
800022c8:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
800022cc:	30 19       	mov	r9,1
800022ce:	f2 0c 09 49 	lsl	r9,r9,r12
800022d2:	f1 49 00 44 	st.w	r8[68],r9
800022d6:	c0 68       	rjmp	800022e2 <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
800022d8:	30 19       	mov	r9,1
800022da:	f2 0c 09 49 	lsl	r9,r9,r12
800022de:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
800022e2:	30 19       	mov	r9,1
800022e4:	f2 0c 09 4c 	lsl	r12,r9,r12
800022e8:	91 1c       	st.w	r8[0x4],r12
}
800022ea:	5e fc       	retal	r12

800022ec <gpio_toggle_pin>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800022ec:	f8 08 16 05 	lsr	r8,r12,0x5
800022f0:	a9 68       	lsl	r8,0x8
800022f2:	e0 28 f0 00 	sub	r8,61440
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
800022f6:	30 19       	mov	r9,1
800022f8:	f2 0c 09 4c 	lsl	r12,r9,r12
800022fc:	f1 4c 00 5c 	st.w	r8[92],r12
}
80002300:	5e fc       	retal	r12

80002302 <gpio_enable_pin_interrupt>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002302:	f8 08 16 05 	lsr	r8,r12,0x5
80002306:	a9 68       	lsl	r8,0x8
80002308:	e0 28 f0 00 	sub	r8,61440

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
8000230c:	30 19       	mov	r9,1
8000230e:	f2 0c 09 4c 	lsl	r12,r9,r12
80002312:	f1 4c 00 c4 	st.w	r8[196],r12
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
80002316:	12 3b       	cp.w	r11,r9
80002318:	c0 a0       	breq	8000232c <gpio_enable_pin_interrupt+0x2a>
8000231a:	c0 43       	brcs	80002322 <gpio_enable_pin_interrupt+0x20>
8000231c:	58 2b       	cp.w	r11,2
8000231e:	c1 11       	brne	80002340 <gpio_enable_pin_interrupt+0x3e>
80002320:	c0 b8       	rjmp	80002336 <gpio_enable_pin_interrupt+0x34>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80002322:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
80002326:	f1 4c 00 b8 	st.w	r8[184],r12
8000232a:	c0 c8       	rjmp	80002342 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
8000232c:	f1 4c 00 a4 	st.w	r8[164],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
80002330:	f1 4c 00 b8 	st.w	r8[184],r12
80002334:	c0 78       	rjmp	80002342 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80002336:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1s = 1 << (pin & 0x1F);
8000233a:	f1 4c 00 b4 	st.w	r8[180],r12
8000233e:	c0 28       	rjmp	80002342 <gpio_enable_pin_interrupt+0x40>
80002340:	5e ff       	retal	1
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
80002342:	f1 4c 00 94 	st.w	r8[148],r12
80002346:	5e fd       	retal	0

80002348 <gpio_disable_pin_interrupt>:
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_interrupt(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002348:	f8 08 16 05 	lsr	r8,r12,0x5
8000234c:	a9 68       	lsl	r8,0x8
8000234e:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->ierc = 1 << (pin & 0x1F);
80002352:	30 19       	mov	r9,1
80002354:	f2 0c 09 4c 	lsl	r12,r9,r12
80002358:	f1 4c 00 98 	st.w	r8[152],r12
}
8000235c:	5e fc       	retal	r12

8000235e <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000235e:	f8 08 16 05 	lsr	r8,r12,0x5
80002362:	a9 68       	lsl	r8,0x8
80002364:	e0 28 f0 00 	sub	r8,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
80002368:	30 19       	mov	r9,1
8000236a:	f2 0c 09 4c 	lsl	r12,r9,r12
8000236e:	f1 4c 00 d8 	st.w	r8[216],r12
#endif
}
80002372:	5e fc       	retal	r12

80002374 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002374:	c0 08       	rjmp	80002374 <_unhandled_interrupt>
80002376:	d7 03       	nop

80002378 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002378:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000237c:	49 99       	lddpc	r9,800023e0 <INTC_register_interrupt+0x68>
8000237e:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002382:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80002386:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80002388:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
8000238c:	58 0a       	cp.w	r10,0
8000238e:	c0 91       	brne	800023a0 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002390:	49 59       	lddpc	r9,800023e4 <INTC_register_interrupt+0x6c>
80002392:	49 6a       	lddpc	r10,800023e8 <INTC_register_interrupt+0x70>
80002394:	12 1a       	sub	r10,r9
80002396:	fe 79 08 00 	mov	r9,-63488
8000239a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000239e:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
800023a0:	58 1a       	cp.w	r10,1
800023a2:	c0 a1       	brne	800023b6 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800023a4:	49 09       	lddpc	r9,800023e4 <INTC_register_interrupt+0x6c>
800023a6:	49 2a       	lddpc	r10,800023ec <INTC_register_interrupt+0x74>
800023a8:	12 1a       	sub	r10,r9
800023aa:	bf aa       	sbr	r10,0x1e
800023ac:	fe 79 08 00 	mov	r9,-63488
800023b0:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800023b4:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
800023b6:	58 2a       	cp.w	r10,2
800023b8:	c0 a1       	brne	800023cc <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800023ba:	48 b9       	lddpc	r9,800023e4 <INTC_register_interrupt+0x6c>
800023bc:	48 da       	lddpc	r10,800023f0 <INTC_register_interrupt+0x78>
800023be:	12 1a       	sub	r10,r9
800023c0:	bf ba       	sbr	r10,0x1f
800023c2:	fe 79 08 00 	mov	r9,-63488
800023c6:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800023ca:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
800023cc:	48 69       	lddpc	r9,800023e4 <INTC_register_interrupt+0x6c>
800023ce:	48 aa       	lddpc	r10,800023f4 <INTC_register_interrupt+0x7c>
800023d0:	12 1a       	sub	r10,r9
800023d2:	ea 1a c0 00 	orh	r10,0xc000
800023d6:	fe 79 08 00 	mov	r9,-63488
800023da:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800023de:	5e fc       	retal	r12
800023e0:	80 00       	ld.sh	r0,r0[0x0]
800023e2:	3a 40       	mov	r0,-92
800023e4:	80 00       	ld.sh	r0,r0[0x0]
800023e6:	38 00       	mov	r0,-128
800023e8:	80 00       	ld.sh	r0,r0[0x0]
800023ea:	39 04       	mov	r4,-112
800023ec:	80 00       	ld.sh	r0,r0[0x0]
800023ee:	39 12       	mov	r2,-111
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	39 20       	mov	r0,-110
800023f4:	80 00       	ld.sh	r0,r0[0x0]
800023f6:	39 2e       	mov	lr,-110

800023f8 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800023f8:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800023fa:	49 18       	lddpc	r8,8000243c <INTC_init_interrupts+0x44>
800023fc:	e3 b8 00 01 	mtsr	0x4,r8
80002400:	49 0e       	lddpc	lr,80002440 <INTC_init_interrupts+0x48>
80002402:	30 07       	mov	r7,0
80002404:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002406:	49 0c       	lddpc	r12,80002444 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002408:	49 05       	lddpc	r5,80002448 <INTC_init_interrupts+0x50>
8000240a:	10 15       	sub	r5,r8
8000240c:	fe 76 08 00 	mov	r6,-63488
80002410:	c1 08       	rjmp	80002430 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002412:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002414:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002416:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002418:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
8000241c:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000241e:	10 3a       	cp.w	r10,r8
80002420:	fe 9b ff fc 	brhi	80002418 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002424:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002428:	2f f7       	sub	r7,-1
8000242a:	2f 8e       	sub	lr,-8
8000242c:	59 e7       	cp.w	r7,30
8000242e:	c0 50       	breq	80002438 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002430:	7c 08       	ld.w	r8,lr[0x0]
80002432:	58 08       	cp.w	r8,0
80002434:	ce f1       	brne	80002412 <INTC_init_interrupts+0x1a>
80002436:	cf 7b       	rjmp	80002424 <INTC_init_interrupts+0x2c>
80002438:	d8 22       	popm	r4-r7,pc
8000243a:	00 00       	add	r0,r0
8000243c:	80 00       	ld.sh	r0,r0[0x0]
8000243e:	38 00       	mov	r0,-128
80002440:	80 00       	ld.sh	r0,r0[0x0]
80002442:	3a 40       	mov	r0,-92
80002444:	80 00       	ld.sh	r0,r0[0x0]
80002446:	23 74       	sub	r4,55
80002448:	80 00       	ld.sh	r0,r0[0x0]
8000244a:	39 04       	mov	r4,-112

8000244c <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000244c:	fe 78 08 00 	mov	r8,-63488
80002450:	e0 69 00 83 	mov	r9,131
80002454:	f2 0c 01 0c 	sub	r12,r9,r12
80002458:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000245c:	f2 ca ff c0 	sub	r10,r9,-64
80002460:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002464:	58 08       	cp.w	r8,0
80002466:	c0 21       	brne	8000246a <_get_interrupt_handler+0x1e>
80002468:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000246a:	f0 08 12 00 	clz	r8,r8
8000246e:	48 5a       	lddpc	r10,80002480 <_get_interrupt_handler+0x34>
80002470:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002474:	f0 08 11 1f 	rsub	r8,r8,31
80002478:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000247a:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000247e:	5e fc       	retal	r12
80002480:	80 00       	ld.sh	r0,r0[0x0]
80002482:	3a 40       	mov	r0,-92

80002484 <pdca_get_handler>:
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80002484:	30 78       	mov	r8,7
80002486:	f0 0c 18 00 	cp.b	r12,r8
8000248a:	e0 88 00 03 	brls	80002490 <pdca_get_handler+0xc>
8000248e:	5e fe       	retal	-1

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
80002490:	a7 6c       	lsl	r12,0x6
80002492:	e0 3c 00 00 	sub	r12,65536
	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
		return (volatile avr32_pdca_channel_t *)PDCA_INVALID_ARGUMENT;
	}

	return pdca_channel;
}
80002496:	5e fc       	retal	r12

80002498 <pdca_enable>:
	/* Disable transfer */
	pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
}

void pdca_enable(uint8_t pdca_ch_number)
{
80002498:	d4 01       	pushm	lr
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
8000249a:	f0 1f 00 03 	mcall	800024a4 <pdca_enable+0xc>
			pdca_ch_number);

	/* Enable transfer */
	pdca_channel->cr = AVR32_PDCA_TEN_MASK;
8000249e:	30 18       	mov	r8,1
800024a0:	99 58       	st.w	r12[0x14],r8
}
800024a2:	d8 02       	popm	pc
800024a4:	80 00       	ld.sh	r0,r0[0x0]
800024a6:	24 84       	sub	r4,72

800024a8 <pdca_enable_interrupt_transfer_complete>:

	cpu_irq_restore(flags);
}

void pdca_enable_interrupt_transfer_complete(uint8_t pdca_ch_number)
{
800024a8:	d4 01       	pushm	lr
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
800024aa:	f0 1f 00 03 	mcall	800024b4 <pdca_enable_interrupt_transfer_complete+0xc>
			pdca_ch_number);

	pdca_channel->ier = AVR32_PDCA_TRC_MASK;
800024ae:	30 28       	mov	r8,2
800024b0:	99 88       	st.w	r12[0x20],r8
}
800024b2:	d8 02       	popm	pc
800024b4:	80 00       	ld.sh	r0,r0[0x0]
800024b6:	24 84       	sub	r4,72

800024b8 <pdca_enable_interrupt_reload_counter_zero>:

	cpu_irq_restore(flags);
}

void pdca_enable_interrupt_reload_counter_zero(uint8_t pdca_ch_number)
{
800024b8:	d4 01       	pushm	lr
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
800024ba:	f0 1f 00 03 	mcall	800024c4 <pdca_enable_interrupt_reload_counter_zero+0xc>
			pdca_ch_number);

	pdca_channel->ier = AVR32_PDCA_RCZ_MASK;
800024be:	30 18       	mov	r8,1
800024c0:	99 88       	st.w	r12[0x20],r8
}
800024c2:	d8 02       	popm	pc
800024c4:	80 00       	ld.sh	r0,r0[0x0]
800024c6:	24 84       	sub	r4,72

800024c8 <pdca_disable_interrupt_reload_counter_zero>:

	pdca_channel->ier = AVR32_PDCA_TRC_MASK;
}

void pdca_disable_interrupt_reload_counter_zero(uint8_t pdca_ch_number)
{
800024c8:	d4 01       	pushm	lr
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
800024ca:	f0 1f 00 07 	mcall	800024e4 <pdca_disable_interrupt_reload_counter_zero+0x1c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800024ce:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800024d2:	d3 03       	ssrf	0x10
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
800024d4:	30 19       	mov	r9,1
800024d6:	99 99       	st.w	r12[0x24],r9
	pdca_channel->isr;
800024d8:	78 b9       	ld.w	r9,r12[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800024da:	e6 18 00 01 	andh	r8,0x1,COH
800024de:	c0 21       	brne	800024e2 <pdca_disable_interrupt_reload_counter_zero+0x1a>
      cpu_irq_enable();
800024e0:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
800024e2:	d8 02       	popm	pc
800024e4:	80 00       	ld.sh	r0,r0[0x0]
800024e6:	24 84       	sub	r4,72

800024e8 <pdca_disable_interrupt_transfer_complete>:

	pdca_channel->ier = AVR32_PDCA_TERR_MASK;
}

void pdca_disable_interrupt_transfer_complete(uint8_t pdca_ch_number)
{
800024e8:	d4 01       	pushm	lr
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
800024ea:	f0 1f 00 07 	mcall	80002504 <pdca_disable_interrupt_transfer_complete+0x1c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800024ee:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800024f2:	d3 03       	ssrf	0x10
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	pdca_channel->idr = AVR32_PDCA_TRC_MASK;
800024f4:	30 29       	mov	r9,2
800024f6:	99 99       	st.w	r12[0x24],r9
	pdca_channel->isr;
800024f8:	78 b9       	ld.w	r9,r12[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800024fa:	e6 18 00 01 	andh	r8,0x1,COH
800024fe:	c0 21       	brne	80002502 <pdca_disable_interrupt_transfer_complete+0x1a>
      cpu_irq_enable();
80002500:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80002502:	d8 02       	popm	pc
80002504:	80 00       	ld.sh	r0,r0[0x0]
80002506:	24 84       	sub	r4,72

80002508 <pdca_reload_channel>:
	return pdca_channel->tcrr;
}

void pdca_reload_channel(uint8_t pdca_ch_number, volatile void *addr,
		uint32_t size)
{
80002508:	eb cd 40 c0 	pushm	r6-r7,lr
8000250c:	16 96       	mov	r6,r11
8000250e:	14 97       	mov	r7,r10
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002510:	f0 1f 00 09 	mcall	80002534 <pdca_reload_channel+0x2c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002514:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002518:	d3 03       	ssrf	0x10
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	/* set up next memory address */
	pdca_channel->marr = (uint32_t)addr;
8000251a:	99 36       	st.w	r12[0xc],r6
	/* set up next memory size */
	pdca_channel->tcrr = size;
8000251c:	99 47       	st.w	r12[0x10],r7
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
8000251e:	e0 69 01 00 	mov	r9,256
80002522:	99 59       	st.w	r12[0x14],r9
	pdca_channel->isr;
80002524:	78 b9       	ld.w	r9,r12[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002526:	e6 18 00 01 	andh	r8,0x1,COH
8000252a:	c0 21       	brne	8000252e <pdca_reload_channel+0x26>
      cpu_irq_enable();
8000252c:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
8000252e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002532:	00 00       	add	r0,r0
80002534:	80 00       	ld.sh	r0,r0[0x0]
80002536:	24 84       	sub	r4,72

80002538 <pdca_init_channel>:
	return pdca_channel;
}

uint32_t pdca_init_channel(uint8_t pdca_ch_number,
		const pdca_channel_options_t *opt)
{
80002538:	eb cd 40 e0 	pushm	r5-r7,lr
8000253c:	18 95       	mov	r5,r12
8000253e:	16 96       	mov	r6,r11
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002540:	f0 1f 00 11 	mcall	80002584 <pdca_init_channel+0x4c>
80002544:	18 97       	mov	r7,r12
			pdca_ch_number);

	pdca_disable_interrupt_transfer_complete(pdca_ch_number); 
80002546:	0a 9c       	mov	r12,r5
80002548:	f0 1f 00 10 	mcall	80002588 <pdca_init_channel+0x50>
	pdca_disable_interrupt_reload_counter_zero(pdca_ch_number);
8000254c:	0a 9c       	mov	r12,r5
8000254e:	f0 1f 00 10 	mcall	8000258c <pdca_init_channel+0x54>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002552:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002556:	d3 03       	ssrf	0x10
	
	irqflags_t flags = cpu_irq_save();

	pdca_channel->mar = (uint32_t)opt->addr;
80002558:	6c 09       	ld.w	r9,r6[0x0]
8000255a:	8f 09       	st.w	r7[0x0],r9
	pdca_channel->tcr = opt->size;
8000255c:	6c 19       	ld.w	r9,r6[0x4]
8000255e:	8f 29       	st.w	r7[0x8],r9
	pdca_channel->psr = opt->pid;
80002560:	6c 49       	ld.w	r9,r6[0x10]
80002562:	8f 19       	st.w	r7[0x4],r9
	pdca_channel->marr = (uint32_t)opt->r_addr;
80002564:	6c 29       	ld.w	r9,r6[0x8]
80002566:	8f 39       	st.w	r7[0xc],r9
	pdca_channel->tcrr = opt->r_size;
80002568:	6c 39       	ld.w	r9,r6[0xc]
8000256a:	8f 49       	st.w	r7[0x10],r9
	pdca_channel->mr =
8000256c:	6c 59       	ld.w	r9,r6[0x14]
8000256e:	8f 69       	st.w	r7[0x18],r9
#if (AVR32_PDCA_H_VERSION >= 120)
			opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
			opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80002570:	e0 69 01 00 	mov	r9,256
80002574:	8f 59       	st.w	r7[0x14],r9
	pdca_channel->isr;
80002576:	6e b9       	ld.w	r9,r7[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002578:	e6 18 00 01 	andh	r8,0x1,COH
8000257c:	c0 21       	brne	80002580 <pdca_init_channel+0x48>
      cpu_irq_enable();
8000257e:	d5 03       	csrf	0x10
	
	cpu_irq_restore(flags);

	return PDCA_SUCCESS;
}
80002580:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002584:	80 00       	ld.sh	r0,r0[0x0]
80002586:	24 84       	sub	r4,72
80002588:	80 00       	ld.sh	r0,r0[0x0]
8000258a:	24 e8       	sub	r8,78
8000258c:	80 00       	ld.sh	r0,r0[0x0]
8000258e:	24 c8       	sub	r8,76

80002590 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002590:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002592:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002596:	99 a8       	st.w	r12[0x28],r8
}
80002598:	5e fc       	retal	r12
8000259a:	d7 03       	nop

8000259c <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
8000259c:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
8000259e:	ec 5b bb 9f 	cp.w	r11,899999
800025a2:	e0 8b 00 04 	brhi	800025aa <pm_enable_osc0_crystal+0xe>
800025a6:	30 4b       	mov	r11,4
800025a8:	c1 38       	rjmp	800025ce <pm_enable_osc0_crystal+0x32>
800025aa:	e0 68 c6 bf 	mov	r8,50879
800025ae:	ea 18 00 2d 	orh	r8,0x2d
800025b2:	10 3b       	cp.w	r11,r8
800025b4:	e0 8b 00 04 	brhi	800025bc <pm_enable_osc0_crystal+0x20>
800025b8:	30 5b       	mov	r11,5
800025ba:	c0 a8       	rjmp	800025ce <pm_enable_osc0_crystal+0x32>
800025bc:	e0 68 12 00 	mov	r8,4608
800025c0:	ea 18 00 7a 	orh	r8,0x7a
800025c4:	10 3b       	cp.w	r11,r8
800025c6:	f9 bb 03 06 	movlo	r11,6
800025ca:	f9 bb 02 07 	movhs	r11,7
800025ce:	f0 1f 00 02 	mcall	800025d4 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
800025d2:	d8 02       	popm	pc
800025d4:	80 00       	ld.sh	r0,r0[0x0]
800025d6:	25 90       	sub	r0,89

800025d8 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800025d8:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
800025da:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800025de:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
800025e0:	78 08       	ld.w	r8,r12[0x0]
800025e2:	a3 a8       	sbr	r8,0x2
800025e4:	99 08       	st.w	r12[0x0],r8
}
800025e6:	5e fc       	retal	r12

800025e8 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
800025e8:	79 58       	ld.w	r8,r12[0x54]
800025ea:	e2 18 00 80 	andl	r8,0x80,COH
800025ee:	cf d0       	breq	800025e8 <pm_wait_for_clk0_ready>
}
800025f0:	5e fc       	retal	r12
800025f2:	d7 03       	nop

800025f4 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
800025f4:	eb cd 40 80 	pushm	r7,lr
800025f8:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
800025fa:	f0 1f 00 04 	mcall	80002608 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
800025fe:	0e 9c       	mov	r12,r7
80002600:	f0 1f 00 03 	mcall	8000260c <pm_enable_clk0+0x18>
}
80002604:	e3 cd 80 80 	ldm	sp++,r7,pc
80002608:	80 00       	ld.sh	r0,r0[0x0]
8000260a:	25 d8       	sub	r8,93
8000260c:	80 00       	ld.sh	r0,r0[0x0]
8000260e:	25 e8       	sub	r8,94

80002610 <pm_cksel>:
              unsigned int pbasel,
              unsigned int pbbdiv,
              unsigned int pbbsel,
              unsigned int hsbdiv,
              unsigned int hsbsel)
{
80002610:	eb cd 40 d0 	pushm	r4,r6-r7,lr
80002614:	fa c4 ff f0 	sub	r4,sp,-16
  u_avr32_pm_cksel_t u_avr32_pm_cksel = {0};
80002618:	30 0e       	mov	lr,0

  u_avr32_pm_cksel.CKSEL.cpusel = hsbsel;
8000261a:	09 f7       	ld.ub	r7,r4[0x7]
8000261c:	ef d7 c0 03 	bfextu	r7,r7,0x0,0x3
80002620:	fd d7 d0 03 	bfins	lr,r7,0x0,0x3
  u_avr32_pm_cksel.CKSEL.cpudiv = hsbdiv;
80002624:	09 b4       	ld.ub	r4,r4[0x3]
80002626:	08 96       	mov	r6,r4
80002628:	e9 d4 c0 01 	bfextu	r4,r4,0x0,0x1
8000262c:	fd d4 d0 e1 	bfins	lr,r4,0x7,0x1
  u_avr32_pm_cksel.CKSEL.hsbsel = hsbsel;
80002630:	fd d7 d1 03 	bfins	lr,r7,0x8,0x3
  u_avr32_pm_cksel.CKSEL.hsbdiv = hsbdiv;
80002634:	fd d4 d1 e1 	bfins	lr,r4,0xf,0x1
  u_avr32_pm_cksel.CKSEL.pbasel = pbasel;
80002638:	fd da d2 03 	bfins	lr,r10,0x10,0x3
  u_avr32_pm_cksel.CKSEL.pbadiv = pbadiv;
8000263c:	fd db d2 e1 	bfins	lr,r11,0x17,0x1
  u_avr32_pm_cksel.CKSEL.pbbsel = pbbsel;
80002640:	fd d8 d3 03 	bfins	lr,r8,0x18,0x3
  u_avr32_pm_cksel.CKSEL.pbbdiv = pbbdiv;
80002644:	fd d9 d3 e1 	bfins	lr,r9,0x1f,0x1

  pm->cksel = u_avr32_pm_cksel.cksel;
80002648:	99 1e       	st.w	r12[0x4],lr

  // Wait for ckrdy bit and then clear it
  while (!(pm->poscsr & AVR32_PM_POSCSR_CKRDY_MASK));
8000264a:	79 58       	ld.w	r8,r12[0x54]
8000264c:	e2 18 00 20 	andl	r8,0x20,COH
80002650:	cf d0       	breq	8000264a <pm_cksel+0x3a>
}
80002652:	e3 cd 80 d0 	ldm	sp++,r4,r6-r7,pc

80002656 <pm_pll_setup>:
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
80002656:	eb cd 40 80 	pushm	r7,lr
8000265a:	40 27       	lddsp	r7,sp[0x8]
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};
8000265c:	30 0e       	mov	lr,0

  u_avr32_pm_pll.PLL.pllosc   = osc;
8000265e:	fd d8 d0 21 	bfins	lr,r8,0x1,0x1
  u_avr32_pm_pll.PLL.plldiv   = div;
80002662:	fd d9 d1 04 	bfins	lr,r9,0x8,0x4
  u_avr32_pm_pll.PLL.pllmul   = mul;
80002666:	fd da d2 04 	bfins	lr,r10,0x10,0x4
  u_avr32_pm_pll.PLL.pllcount = lockcount;
8000266a:	fd d7 d3 06 	bfins	lr,r7,0x18,0x6

  pm->pll[pll] = u_avr32_pm_pll.pll;
8000266e:	2f 8b       	sub	r11,-8
80002670:	f8 0b 09 2e 	st.w	r12[r11<<0x2],lr
}
80002674:	e3 cd 80 80 	ldm	sp++,r7,pc

80002678 <pm_pll_set_option>:
void pm_pll_set_option(volatile avr32_pm_t *pm,
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
80002678:	d4 01       	pushm	lr
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
8000267a:	2f 8b       	sub	r11,-8
8000267c:	f8 0b 03 2e 	ld.w	lr,r12[r11<<0x2]
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
80002680:	f5 e9 10 19 	or	r9,r10,r9<<0x1
80002684:	f3 e8 10 28 	or	r8,r9,r8<<0x2
80002688:	fd d8 d0 43 	bfins	lr,r8,0x2,0x3
  pm->pll[pll] = u_avr32_pm_pll.pll;
8000268c:	f8 0b 09 2e 	st.w	r12[r11<<0x2],lr
}
80002690:	d8 02       	popm	pc

80002692 <pm_pll_enable>:


void pm_pll_enable(volatile avr32_pm_t *pm,
                  unsigned int pll)
{
  pm->pll[pll] |= AVR32_PM_PLLEN_MASK;
80002692:	2f 8b       	sub	r11,-8
80002694:	f8 0b 03 28 	ld.w	r8,r12[r11<<0x2]
80002698:	a1 a8       	sbr	r8,0x0
8000269a:	f8 0b 09 28 	st.w	r12[r11<<0x2],r8
}
8000269e:	5e fc       	retal	r12

800026a0 <pm_wait_for_pll0_locked>:
}


void pm_wait_for_pll0_locked(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK0_MASK));
800026a0:	79 58       	ld.w	r8,r12[0x54]
800026a2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800026a6:	cf d0       	breq	800026a0 <pm_wait_for_pll0_locked>
}
800026a8:	5e fc       	retal	r12

800026aa <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
800026aa:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
800026ac:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
800026b0:	99 08       	st.w	r12[0x0],r8
}
800026b2:	5e fc       	retal	r12

800026b4 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
800026b4:	eb cd 40 c0 	pushm	r6-r7,lr
800026b8:	18 97       	mov	r7,r12
800026ba:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
800026bc:	f0 1f 00 06 	mcall	800026d4 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
800026c0:	0c 9b       	mov	r11,r6
800026c2:	0e 9c       	mov	r12,r7
800026c4:	f0 1f 00 05 	mcall	800026d8 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
800026c8:	30 1b       	mov	r11,1
800026ca:	0e 9c       	mov	r12,r7
800026cc:	f0 1f 00 04 	mcall	800026dc <pm_switch_to_osc0+0x28>
}
800026d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800026d4:	80 00       	ld.sh	r0,r0[0x0]
800026d6:	25 9c       	sub	r12,89
800026d8:	80 00       	ld.sh	r0,r0[0x0]
800026da:	25 f4       	sub	r4,95
800026dc:	80 00       	ld.sh	r0,r0[0x0]
800026de:	26 aa       	sub	r10,106

800026e0 <pm_configure_clocks>:

#define PM_MAX_MUL                ((1 << AVR32_PM_PLL0_PLLMUL_SIZE) - 1)


int pm_configure_clocks(pm_freq_param_t *param)
{
800026e0:	eb cd 40 fc 	pushm	r2-r7,lr
800026e4:	18 97       	mov	r7,r12
  //  12    8   1  108     1     54    27
  //  12    9   1  120     1     60    15
  //  12    9   1  120     1     60    30
  //  12   10   1  132     1     66    16.5
  //
  unsigned long in_cpu_f  = param->cpu_f;
800026e6:	78 05       	ld.w	r5,r12[0x0]
  unsigned long in_osc0_f = param->osc0_f;
800026e8:	78 26       	ld.w	r6,r12[0x8]
  unsigned long mul, div, div2_en = 0, div2_cpu = 0, div2_pba = 0;
  unsigned long pll_freq, rest;
  bool b_div2_pba, b_div2_cpu;

  // Switch to external Oscillator 0
  pm_switch_to_osc0(&AVR32_PM, in_osc0_f, param->osc0_startup);
800026ea:	78 3a       	ld.w	r10,r12[0xc]
800026ec:	0c 9b       	mov	r11,r6
800026ee:	fe 7c 0c 00 	mov	r12,-62464
800026f2:	f0 1f 00 7a 	mcall	800028d8 <pm_configure_clocks+0x1f8>

  // Start with CPU freq config
  if (in_cpu_f == in_osc0_f)
800026f6:	0c 35       	cp.w	r5,r6
800026f8:	c0 51       	brne	80002702 <pm_configure_clocks+0x22>
  {
    param->cpu_f = in_osc0_f;
800026fa:	8f 05       	st.w	r7[0x0],r5
    param->pba_f = in_osc0_f;
800026fc:	8f 15       	st.w	r7[0x4],r5
800026fe:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
  else if (in_cpu_f < in_osc0_f)
  {
    // TBD
  }

  rest = in_cpu_f % in_osc0_f;
80002702:	ea 06 0d 08 	divu	r8,r5,r6
80002706:	12 9c       	mov	r12,r9

  for (div = 1; div < 32; div++)
  {
    if ((div * rest) % in_osc0_f == 0)
80002708:	f8 06 0d 08 	divu	r8,r12,r6
8000270c:	58 09       	cp.w	r9,0
8000270e:	c0 31       	brne	80002714 <pm_configure_clocks+0x34>
80002710:	30 19       	mov	r9,1
80002712:	c1 28       	rjmp	80002736 <pm_configure_clocks+0x56>
80002714:	f8 08 15 01 	lsl	r8,r12,0x1
80002718:	30 29       	mov	r9,2
8000271a:	f0 06 0d 0a 	divu	r10,r8,r6
8000271e:	58 0b       	cp.w	r11,0
80002720:	c0 70       	breq	8000272e <pm_configure_clocks+0x4e>
    // TBD
  }

  rest = in_cpu_f % in_osc0_f;

  for (div = 1; div < 32; div++)
80002722:	2f f9       	sub	r9,-1
80002724:	18 08       	add	r8,r12
80002726:	e0 49 00 20 	cp.w	r9,32
8000272a:	cf 81       	brne	8000271a <pm_configure_clocks+0x3a>
8000272c:	cd 38       	rjmp	800028d2 <pm_configure_clocks+0x1f2>
  {
    if ((div * rest) % in_osc0_f == 0)
      break;
  }
  if (div == 32)
8000272e:	e0 49 00 20 	cp.w	r9,32
80002732:	e0 80 00 d0 	breq	800028d2 <pm_configure_clocks+0x1f2>
    return PM_FREQ_STATUS_FAIL;

  mul = (in_cpu_f * div) / in_osc0_f;
80002736:	f2 05 02 4b 	mul	r11,r9,r5
8000273a:	f6 06 0d 0a 	divu	r10,r11,r6

  if (mul > PM_MAX_MUL)
8000273e:	58 fa       	cp.w	r10,15
80002740:	e0 8b 00 c9 	brhi	800028d2 <pm_configure_clocks+0x1f2>
    return PM_FREQ_STATUS_FAIL;

  // export 2power from PLL div to div2_cpu
  while (!(div % 2))
80002744:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80002748:	c0 30       	breq	8000274e <pm_configure_clocks+0x6e>
8000274a:	30 05       	mov	r5,0
8000274c:	c0 78       	rjmp	8000275a <pm_configure_clocks+0x7a>
8000274e:	30 05       	mov	r5,0
  {
    div /= 2;
80002750:	a1 99       	lsr	r9,0x1
    div2_cpu++;
80002752:	2f f5       	sub	r5,-1

  if (mul > PM_MAX_MUL)
    return PM_FREQ_STATUS_FAIL;

  // export 2power from PLL div to div2_cpu
  while (!(div % 2))
80002754:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80002758:	cf c0       	breq	80002750 <pm_configure_clocks+0x70>

  // Here we know the mul and div parameter of the PLL config.
  // . Check out if the PLL has a valid in_cpu_f.
  // . Try to have for the PLL frequency (VCO output) the highest possible value
  //   to reduce jitter.
  while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
8000275a:	f4 06 02 4b 	mul	r11,r10,r6
8000275e:	f6 03 15 01 	lsl	r3,r11,0x1
80002762:	e6 09 0d 02 	divu	r2,r3,r9
80002766:	e0 6c 1b ff 	mov	r12,7167
8000276a:	ea 1c 0e 4e 	orh	r12,0xe4e
8000276e:	18 32       	cp.w	r2,r12
80002770:	e0 8b 00 1d 	brhi	800027aa <pm_configure_clocks+0xca>
  {
    if (2 * mul > PM_MAX_MUL)
80002774:	f4 08 15 01 	lsl	r8,r10,0x1
80002778:	58 f8       	cp.w	r8,15
8000277a:	e0 88 00 09 	brls	8000278c <pm_configure_clocks+0xac>
8000277e:	c1 68       	rjmp	800027aa <pm_configure_clocks+0xca>
80002780:	f0 0a 15 01 	lsl	r10,r8,0x1
80002784:	58 fa       	cp.w	r10,15
80002786:	e0 8b 00 11 	brhi	800027a8 <pm_configure_clocks+0xc8>
8000278a:	14 98       	mov	r8,r10
      break;
    mul *= 2;
    div2_cpu++;
8000278c:	2f f5       	sub	r5,-1

  // Here we know the mul and div parameter of the PLL config.
  // . Check out if the PLL has a valid in_cpu_f.
  // . Try to have for the PLL frequency (VCO output) the highest possible value
  //   to reduce jitter.
  while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
8000278e:	f0 06 02 4b 	mul	r11,r8,r6
80002792:	f6 03 15 01 	lsl	r3,r11,0x1
80002796:	e6 09 0d 02 	divu	r2,r3,r9
8000279a:	e0 6c 1b ff 	mov	r12,7167
8000279e:	ea 1c 0e 4e 	orh	r12,0xe4e
800027a2:	18 32       	cp.w	r2,r12
800027a4:	fe 98 ff ee 	brls	80002780 <pm_configure_clocks+0xa0>
800027a8:	10 9a       	mov	r10,r8
      break;
    mul *= 2;
    div2_cpu++;
  }

  if (div2_cpu != 0)
800027aa:	58 05       	cp.w	r5,0
800027ac:	f9 b6 00 00 	moveq	r6,0
  {
    div2_cpu--;
800027b0:	f7 b5 01 01 	subne	r5,1
800027b4:	f9 b6 01 01 	movne	r6,1
    div2_en = 1;
  }

  pll_freq = in_osc0_f * mul / (div * (1 << div2_en));
800027b8:	f2 06 09 43 	lsl	r3,r9,r6
800027bc:	f6 03 0d 02 	divu	r2,r11,r3
800027c0:	04 94       	mov	r4,r2

  // Update real CPU Frequency
  param->cpu_f = pll_freq / (1 << div2_cpu);
800027c2:	e4 05 0a 48 	lsr	r8,r2,r5
800027c6:	8f 08       	st.w	r7[0x0],r8
  mul--;

  pm_pll_setup(&AVR32_PM
800027c8:	31 08       	mov	r8,16
800027ca:	1a d8       	st.w	--sp,r8
800027cc:	30 08       	mov	r8,0
800027ce:	20 1a       	sub	r10,1
800027d0:	10 9b       	mov	r11,r8
800027d2:	fe 7c 0c 00 	mov	r12,-62464
800027d6:	f0 1f 00 42 	mcall	800028dc <pm_configure_clocks+0x1fc>
  , div // div
  , 0   // osc
  , 16  // lockcount
  );

  pm_pll_set_option(&AVR32_PM
800027da:	e0 69 67 ff 	mov	r9,26623
800027de:	ea 19 09 89 	orh	r9,0x989
800027e2:	12 32       	cp.w	r2,r9
800027e4:	5f 8a       	srls	r10
800027e6:	30 08       	mov	r8,0
800027e8:	0c 99       	mov	r9,r6
800027ea:	10 9b       	mov	r11,r8
800027ec:	fe 7c 0c 00 	mov	r12,-62464
800027f0:	f0 1f 00 3c 	mcall	800028e0 <pm_configure_clocks+0x200>
800027f4:	04 98       	mov	r8,r2
800027f6:	30 06       	mov	r6,0
  , div2_en // pll_div2
  , 0 // pll_wbwdisable
  );

  rest = pll_freq;
  while (rest > AVR32_PM_PBA_MAX_FREQ ||
800027f8:	2f fd       	sub	sp,-4
800027fa:	c0 78       	rjmp	80002808 <pm_configure_clocks+0x128>
         rest != param->pba_f)
  {
    div2_pba++;
800027fc:	2f f6       	sub	r6,-1
    rest = pll_freq / (1 << div2_pba);
800027fe:	e8 06 0a 48 	lsr	r8,r4,r6
    if (rest < param->pba_f)
80002802:	6e 19       	ld.w	r9,r7[0x4]
80002804:	12 38       	cp.w	r8,r9
80002806:	c0 b3       	brcs	8000281c <pm_configure_clocks+0x13c>
  , div2_en // pll_div2
  , 0 // pll_wbwdisable
  );

  rest = pll_freq;
  while (rest > AVR32_PM_PBA_MAX_FREQ ||
80002808:	e0 6c a2 00 	mov	r12,41472
8000280c:	ea 1c 04 4a 	orh	r12,0x44a
80002810:	18 38       	cp.w	r8,r12
80002812:	fe 9b ff f5 	brhi	800027fc <pm_configure_clocks+0x11c>
         rest != param->pba_f)
80002816:	6e 19       	ld.w	r9,r7[0x4]
80002818:	10 39       	cp.w	r9,r8
8000281a:	cf 11       	brne	800027fc <pm_configure_clocks+0x11c>
    if (rest < param->pba_f)
      break;
  }

  // Update real PBA Frequency
  param->pba_f = pll_freq / (1 << div2_pba);
8000281c:	e8 06 0a 44 	lsr	r4,r4,r6
80002820:	8f 14       	st.w	r7[0x4],r4

  // Enable PLL0
  pm_pll_enable(&AVR32_PM, 0);
80002822:	30 0b       	mov	r11,0
80002824:	fe 7c 0c 00 	mov	r12,-62464
80002828:	f0 1f 00 2f 	mcall	800028e4 <pm_configure_clocks+0x204>

  // Wait for PLL0 locked
  pm_wait_for_pll0_locked(&AVR32_PM);
8000282c:	fe 7c 0c 00 	mov	r12,-62464
80002830:	f0 1f 00 2e 	mcall	800028e8 <pm_configure_clocks+0x208>

  if (div2_cpu)
80002834:	58 05       	cp.w	r5,0
80002836:	f9 b9 00 00 	moveq	r9,0
  {
    b_div2_cpu = true;
    div2_cpu--;
8000283a:	f7 b5 01 01 	subne	r5,1
8000283e:	f9 b9 01 01 	movne	r9,1
  }
  else
    b_div2_cpu = false;

  if (div2_pba)
80002842:	58 06       	cp.w	r6,0
80002844:	f9 bb 00 00 	moveq	r11,0
  {
    b_div2_pba = true;
    div2_pba--;
80002848:	f7 b6 01 01 	subne	r6,1
8000284c:	f9 bb 01 01 	movne	r11,1
  }
  else
    b_div2_pba = false;

  pm_cksel(&AVR32_PM
80002850:	1a d5       	st.w	--sp,r5
80002852:	1a d9       	st.w	--sp,r9
80002854:	0a 98       	mov	r8,r5
80002856:	0c 9a       	mov	r10,r6
80002858:	fe 7c 0c 00 	mov	r12,-62464
8000285c:	f0 1f 00 24 	mcall	800028ec <pm_configure_clocks+0x20c>
  , b_div2_pba, div2_pba // PBA
  , b_div2_cpu, div2_cpu // PBB
  , b_div2_cpu, div2_cpu // HSB
  );

  if (param->cpu_f > AVR32_FLASHC_FWS_0_MAX_FREQ)
80002860:	2f ed       	sub	sp,-8
80002862:	6e 08       	ld.w	r8,r7[0x0]
80002864:	e0 69 51 00 	mov	r9,20736
80002868:	ea 19 02 25 	orh	r9,0x225
8000286c:	12 38       	cp.w	r8,r9
8000286e:	e0 88 00 17 	brls	8000289c <pm_configure_clocks+0x1bc>
  {
    flashc_set_wait_state(1);
80002872:	30 1c       	mov	r12,1
80002874:	f0 1f 00 1f 	mcall	800028f0 <pm_configure_clocks+0x210>
#if (defined AVR32_FLASHC_210_H_INCLUDED)
    if (param->cpu_f > AVR32_FLASHC_HSEN_FWS_1_MAX_FREQ)
80002878:	6e 08       	ld.w	r8,r7[0x0]
8000287a:	e0 6c 14 80 	mov	r12,5248
8000287e:	ea 1c 03 ef 	orh	r12,0x3ef
80002882:	18 38       	cp.w	r8,r12
80002884:	e0 88 00 07 	brls	80002892 <pm_configure_clocks+0x1b2>
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSEN, -1);
80002888:	3f fb       	mov	r11,-1
8000288a:	31 0c       	mov	r12,16
8000288c:	f0 1f 00 1a 	mcall	800028f4 <pm_configure_clocks+0x214>
80002890:	c1 a8       	rjmp	800028c4 <pm_configure_clocks+0x1e4>
    else
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
80002892:	3f fb       	mov	r11,-1
80002894:	31 1c       	mov	r12,17
80002896:	f0 1f 00 18 	mcall	800028f4 <pm_configure_clocks+0x214>
8000289a:	c1 58       	rjmp	800028c4 <pm_configure_clocks+0x1e4>
#endif
  }
  else
  {
    flashc_set_wait_state(0);
8000289c:	30 0c       	mov	r12,0
8000289e:	f0 1f 00 15 	mcall	800028f0 <pm_configure_clocks+0x210>
#if (defined AVR32_FLASHC_210_H_INCLUDED)
    if (param->cpu_f > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ)
800028a2:	6e 08       	ld.w	r8,r7[0x0]
800028a4:	e0 69 8a 40 	mov	r9,35392
800028a8:	ea 19 01 f7 	orh	r9,0x1f7
800028ac:	12 38       	cp.w	r8,r9
800028ae:	e0 88 00 07 	brls	800028bc <pm_configure_clocks+0x1dc>
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSEN, -1);
800028b2:	3f fb       	mov	r11,-1
800028b4:	31 0c       	mov	r12,16
800028b6:	f0 1f 00 10 	mcall	800028f4 <pm_configure_clocks+0x214>
800028ba:	c0 58       	rjmp	800028c4 <pm_configure_clocks+0x1e4>
    else
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
800028bc:	3f fb       	mov	r11,-1
800028be:	31 1c       	mov	r12,17
800028c0:	f0 1f 00 0d 	mcall	800028f4 <pm_configure_clocks+0x214>
#endif
  }

  pm_switch_to_clock(&AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0);
800028c4:	30 2b       	mov	r11,2
800028c6:	fe 7c 0c 00 	mov	r12,-62464
800028ca:	f0 1f 00 0c 	mcall	800028f8 <pm_configure_clocks+0x218>
800028ce:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

  return PM_FREQ_STATUS_OK;
800028d2:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
800028d6:	00 00       	add	r0,r0
800028d8:	80 00       	ld.sh	r0,r0[0x0]
800028da:	26 b4       	sub	r4,107
800028dc:	80 00       	ld.sh	r0,r0[0x0]
800028de:	26 56       	sub	r6,101
800028e0:	80 00       	ld.sh	r0,r0[0x0]
800028e2:	26 78       	sub	r8,103
800028e4:	80 00       	ld.sh	r0,r0[0x0]
800028e6:	26 92       	sub	r2,105
800028e8:	80 00       	ld.sh	r0,r0[0x0]
800028ea:	26 a0       	sub	r0,106
800028ec:	80 00       	ld.sh	r0,r0[0x0]
800028ee:	26 10       	sub	r0,97
800028f0:	80 00       	ld.sh	r0,r0[0x0]
800028f2:	21 26       	sub	r6,18
800028f4:	80 00       	ld.sh	r0,r0[0x0]
800028f6:	21 50       	sub	r0,21
800028f8:	80 00       	ld.sh	r0,r0[0x0]
800028fa:	26 aa       	sub	r10,106

800028fc <tc_init_waveform>:


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800028fc:	76 09       	ld.w	r9,r11[0x0]
800028fe:	58 29       	cp.w	r9,2
80002900:	e0 88 00 03 	brls	80002906 <tc_init_waveform+0xa>
80002904:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002906:	76 18       	ld.w	r8,r11[0x4]
80002908:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000290c:	af ba       	sbr	r10,0xf
8000290e:	10 9b       	mov	r11,r8
80002910:	e6 1b c0 00 	andh	r11,0xc000,COH
80002914:	16 4a       	or	r10,r11
80002916:	10 9b       	mov	r11,r8
80002918:	e6 1b 30 00 	andh	r11,0x3000,COH
8000291c:	16 4a       	or	r10,r11
8000291e:	10 9b       	mov	r11,r8
80002920:	e6 1b 0c 00 	andh	r11,0xc00,COH
80002924:	16 4a       	or	r10,r11
80002926:	10 9b       	mov	r11,r8
80002928:	e6 1b 03 00 	andh	r11,0x300,COH
8000292c:	16 4a       	or	r10,r11
8000292e:	10 9b       	mov	r11,r8
80002930:	e6 1b 00 c0 	andh	r11,0xc0,COH
80002934:	16 4a       	or	r10,r11
80002936:	10 9b       	mov	r11,r8
80002938:	e6 1b 00 30 	andh	r11,0x30,COH
8000293c:	16 4a       	or	r10,r11
8000293e:	10 9b       	mov	r11,r8
80002940:	e6 1b 00 0c 	andh	r11,0xc,COH
80002944:	16 4a       	or	r10,r11
80002946:	10 9b       	mov	r11,r8
80002948:	e6 1b 00 03 	andh	r11,0x3,COH
8000294c:	16 4a       	or	r10,r11
8000294e:	10 9b       	mov	r11,r8
80002950:	e2 1b 60 00 	andl	r11,0x6000,COH
80002954:	16 4a       	or	r10,r11
80002956:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
8000295a:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
8000295e:	10 9b       	mov	r11,r8
80002960:	e2 1b 0c 00 	andl	r11,0xc00,COH
80002964:	16 4a       	or	r10,r11
80002966:	10 9b       	mov	r11,r8
80002968:	e2 1b 03 00 	andl	r11,0x300,COH
8000296c:	16 4a       	or	r10,r11
8000296e:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
80002972:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
80002976:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
8000297a:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
8000297e:	10 9b       	mov	r11,r8
80002980:	e2 1b 00 30 	andl	r11,0x30,COH
80002984:	16 4a       	or	r10,r11
80002986:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
8000298a:	f5 e8 10 38 	or	r8,r10,r8<<0x3
8000298e:	a5 69       	lsl	r9,0x4
80002990:	2f f9       	sub	r9,-1
80002992:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
80002996:	5e fd       	retal	0

80002998 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002998:	58 2b       	cp.w	r11,2
8000299a:	e0 88 00 03 	brls	800029a0 <tc_start+0x8>
8000299e:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
800029a0:	a7 6b       	lsl	r11,0x6
800029a2:	16 0c       	add	r12,r11
800029a4:	30 58       	mov	r8,5
800029a6:	99 08       	st.w	r12[0x0],r8
800029a8:	5e fd       	retal	0

800029aa <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800029aa:	58 2b       	cp.w	r11,2
800029ac:	e0 88 00 03 	brls	800029b2 <tc_read_sr+0x8>
800029b0:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
800029b2:	a7 6b       	lsl	r11,0x6
800029b4:	2e 0b       	sub	r11,-32
800029b6:	16 0c       	add	r12,r11
800029b8:	78 0c       	ld.w	r12,r12[0x0]
}
800029ba:	5e fc       	retal	r12

800029bc <tc_write_ra>:


int tc_write_ra(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800029bc:	58 2b       	cp.w	r11,2
800029be:	e0 88 00 03 	brls	800029c4 <tc_write_ra+0x8>
800029c2:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800029c4:	f6 08 15 04 	lsl	r8,r11,0x4
800029c8:	2f f8       	sub	r8,-1
800029ca:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
800029ce:	e2 18 80 00 	andl	r8,0x8000,COH
800029d2:	c0 c0       	breq	800029ea <tc_write_ra+0x2e>
    Wr_bitfield(tc->channel[channel].ra, AVR32_TC_RA_MASK, value);
800029d4:	a7 6b       	lsl	r11,0x6
800029d6:	16 0c       	add	r12,r11
800029d8:	2e cc       	sub	r12,-20
800029da:	78 08       	ld.w	r8,r12[0x0]
800029dc:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
800029e0:	e0 18 00 00 	andl	r8,0x0
800029e4:	f3 e8 10 08 	or	r8,r9,r8
800029e8:	99 08       	st.w	r12[0x0],r8

  return value;
800029ea:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
800029ee:	5e fc       	retal	r12

800029f0 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800029f0:	58 2b       	cp.w	r11,2
800029f2:	e0 88 00 03 	brls	800029f8 <tc_write_rc+0x8>
800029f6:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800029f8:	f6 08 15 04 	lsl	r8,r11,0x4
800029fc:	2f f8       	sub	r8,-1
800029fe:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80002a02:	e2 18 80 00 	andl	r8,0x8000,COH
80002a06:	c0 c0       	breq	80002a1e <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80002a08:	a7 6b       	lsl	r11,0x6
80002a0a:	16 0c       	add	r12,r11
80002a0c:	2e 4c       	sub	r12,-28
80002a0e:	78 08       	ld.w	r8,r12[0x0]
80002a10:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80002a14:	e0 18 00 00 	andl	r8,0x0
80002a18:	f3 e8 10 08 	or	r8,r9,r8
80002a1c:	99 08       	st.w	r12[0x0],r8

  return value;
80002a1e:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
80002a22:	5e fc       	retal	r12

80002a24 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80002a24:	eb cd 40 fc 	pushm	r2-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002a28:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a2c:	58 2b       	cp.w	r11,2
80002a2e:	e0 88 00 04 	brls	80002a36 <tc_configure_interrupts+0x12>
80002a32:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80002a36:	ee 19 00 01 	eorh	r9,0x1
80002a3a:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002a3e:	74 08       	ld.w	r8,r10[0x0]
80002a40:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
80002a44:	fd d8 c0 c1 	bfextu	lr,r8,0x6,0x1
80002a48:	a7 6e       	lsl	lr,0x6
80002a4a:	fd e7 10 7e 	or	lr,lr,r7<<0x7
80002a4e:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
80002a52:	0e 4e       	or	lr,r7
80002a54:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
80002a58:	fd e7 10 5e 	or	lr,lr,r7<<0x5
80002a5c:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80002a60:	fd e7 10 4e 	or	lr,lr,r7<<0x4
80002a64:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
80002a68:	fd e7 10 3e 	or	lr,lr,r7<<0x3
80002a6c:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
80002a70:	fd e7 10 2e 	or	lr,lr,r7<<0x2
80002a74:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002a78:	fd e8 10 18 	or	r8,lr,r8<<0x1
80002a7c:	f6 0e 15 06 	lsl	lr,r11,0x6
80002a80:	f8 0e 00 0e 	add	lr,r12,lr
80002a84:	2d ce       	sub	lr,-36
80002a86:	9d 08       	st.w	lr[0x0],r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002a88:	58 09       	cp.w	r9,0
80002a8a:	c0 20       	breq	80002a8e <tc_configure_interrupts+0x6a>
80002a8c:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002a8e:	74 08       	ld.w	r8,r10[0x0]
80002a90:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80002a94:	e0 65 00 80 	mov	r5,128
80002a98:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80002a9c:	74 08       	ld.w	r8,r10[0x0]
80002a9e:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80002aa2:	f9 b4 00 40 	moveq	r4,64
80002aa6:	f9 b4 01 00 	movne	r4,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80002aaa:	74 08       	ld.w	r8,r10[0x0]
80002aac:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002ab0:	f9 b3 00 20 	moveq	r3,32
80002ab4:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80002ab8:	74 08       	ld.w	r8,r10[0x0]
80002aba:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002abe:	f9 b2 00 10 	moveq	r2,16
80002ac2:	f9 b2 01 00 	movne	r2,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80002ac6:	74 08       	ld.w	r8,r10[0x0]
80002ac8:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002acc:	f9 b6 00 08 	moveq	r6,8
80002ad0:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80002ad4:	74 08       	ld.w	r8,r10[0x0]
80002ad6:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80002ada:	f9 b7 00 04 	moveq	r7,4
80002ade:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80002ae2:	74 08       	ld.w	r8,r10[0x0]
80002ae4:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002ae8:	f9 be 00 02 	moveq	lr,2
80002aec:	f9 be 01 00 	movne	lr,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002af0:	74 08       	ld.w	r8,r10[0x0]
80002af2:	ec 18 00 01 	eorl	r8,0x1
80002af6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002afa:	eb e8 10 08 	or	r8,r5,r8
80002afe:	08 48       	or	r8,r4
80002b00:	06 48       	or	r8,r3
80002b02:	04 48       	or	r8,r2
80002b04:	0c 48       	or	r8,r6
80002b06:	0e 48       	or	r8,r7
80002b08:	1c 48       	or	r8,lr
80002b0a:	f6 0a 15 06 	lsl	r10,r11,0x6
80002b0e:	f8 0a 00 0a 	add	r10,r12,r10
80002b12:	2d 8a       	sub	r10,-40
80002b14:	95 08       	st.w	r10[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002b16:	a7 6b       	lsl	r11,0x6
80002b18:	2e 0b       	sub	r11,-32
80002b1a:	16 0c       	add	r12,r11
80002b1c:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002b1e:	58 09       	cp.w	r9,0
80002b20:	c0 31       	brne	80002b26 <tc_configure_interrupts+0x102>
80002b22:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80002b26:	d5 03       	csrf	0x10
80002b28:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

80002b2c <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002b2c:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002b2e:	f6 08 15 04 	lsl	r8,r11,0x4
80002b32:	14 38       	cp.w	r8,r10
80002b34:	f9 b8 08 10 	movls	r8,16
80002b38:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002b3c:	f0 0b 02 4b 	mul	r11,r8,r11
80002b40:	f6 09 16 01 	lsr	r9,r11,0x1
80002b44:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80002b48:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002b4c:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002b50:	f2 cb 00 01 	sub	r11,r9,1
80002b54:	e0 4b ff fe 	cp.w	r11,65534
80002b58:	e0 88 00 03 	brls	80002b5e <usart_set_async_baudrate+0x32>
80002b5c:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002b5e:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002b60:	e8 6e 00 00 	mov	lr,524288
80002b64:	59 08       	cp.w	r8,16
80002b66:	fc 08 17 10 	movne	r8,lr
80002b6a:	f9 b8 00 00 	moveq	r8,0
80002b6e:	e4 1b ff f7 	andh	r11,0xfff7
80002b72:	e0 1b fe cf 	andl	r11,0xfecf
80002b76:	16 48       	or	r8,r11
80002b78:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80002b7a:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80002b7e:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80002b82:	99 89       	st.w	r12[0x20],r9
80002b84:	d8 0a       	popm	pc,r12=0

80002b86 <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002b86:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002b88:	e2 18 00 02 	andl	r8,0x2,COH
80002b8c:	c0 31       	brne	80002b92 <usart_write_char+0xc>
80002b8e:	30 2c       	mov	r12,2
80002b90:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002b92:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002b96:	99 7b       	st.w	r12[0x1c],r11
80002b98:	5e fd       	retal	0
80002b9a:	d7 03       	nop

80002b9c <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002b9c:	eb cd 40 e0 	pushm	r5-r7,lr
80002ba0:	18 96       	mov	r6,r12
80002ba2:	16 95       	mov	r5,r11
80002ba4:	e0 67 27 0f 	mov	r7,9999
80002ba8:	c0 68       	rjmp	80002bb4 <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002baa:	58 07       	cp.w	r7,0
80002bac:	c0 31       	brne	80002bb2 <usart_putchar+0x16>
80002bae:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80002bb2:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80002bb4:	0a 9b       	mov	r11,r5
80002bb6:	0c 9c       	mov	r12,r6
80002bb8:	f0 1f 00 03 	mcall	80002bc4 <usart_putchar+0x28>
80002bbc:	cf 71       	brne	80002baa <usart_putchar+0xe>

  return USART_SUCCESS;
}
80002bbe:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002bc2:	00 00       	add	r0,r0
80002bc4:	80 00       	ld.sh	r0,r0[0x0]
80002bc6:	2b 86       	sub	r6,-72

80002bc8 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80002bc8:	eb cd 40 c0 	pushm	r6-r7,lr
80002bcc:	18 96       	mov	r6,r12
80002bce:	16 97       	mov	r7,r11
  while (*string != '\0')
80002bd0:	17 8b       	ld.ub	r11,r11[0x0]
80002bd2:	58 0b       	cp.w	r11,0
80002bd4:	c0 80       	breq	80002be4 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80002bd6:	2f f7       	sub	r7,-1
80002bd8:	0c 9c       	mov	r12,r6
80002bda:	f0 1f 00 04 	mcall	80002be8 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002bde:	0f 8b       	ld.ub	r11,r7[0x0]
80002be0:	58 0b       	cp.w	r11,0
80002be2:	cf a1       	brne	80002bd6 <usart_write_line+0xe>
80002be4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002be8:	80 00       	ld.sh	r0,r0[0x0]
80002bea:	2b 9c       	sub	r12,-71

80002bec <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002bec:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002bf0:	e6 18 00 01 	andh	r8,0x1,COH
80002bf4:	c0 71       	brne	80002c02 <usart_reset+0x16>
80002bf6:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002bf8:	3f f8       	mov	r8,-1
80002bfa:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002bfc:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002bfe:	d5 03       	csrf	0x10
80002c00:	c0 48       	rjmp	80002c08 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80002c02:	3f f8       	mov	r8,-1
80002c04:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c06:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002c08:	30 08       	mov	r8,0
80002c0a:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002c0c:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002c0e:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002c10:	ea 68 61 0c 	mov	r8,680204
80002c14:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80002c16:	5e fc       	retal	r12

80002c18 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002c18:	eb cd 40 e0 	pushm	r5-r7,lr
80002c1c:	18 96       	mov	r6,r12
80002c1e:	16 97       	mov	r7,r11
80002c20:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80002c22:	f0 1f 00 2f 	mcall	80002cdc <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80002c26:	58 07       	cp.w	r7,0
80002c28:	c5 80       	breq	80002cd8 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80002c2a:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002c2c:	30 49       	mov	r9,4
80002c2e:	f2 08 18 00 	cp.b	r8,r9
80002c32:	e0 88 00 53 	brls	80002cd8 <usart_init_rs232+0xc0>
80002c36:	30 99       	mov	r9,9
80002c38:	f2 08 18 00 	cp.b	r8,r9
80002c3c:	e0 8b 00 4e 	brhi	80002cd8 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002c40:	0f d9       	ld.ub	r9,r7[0x5]
80002c42:	30 78       	mov	r8,7
80002c44:	f0 09 18 00 	cp.b	r9,r8
80002c48:	e0 8b 00 48 	brhi	80002cd8 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80002c4c:	8e 39       	ld.sh	r9,r7[0x6]
80002c4e:	e0 68 01 01 	mov	r8,257
80002c52:	f0 09 19 00 	cp.h	r9,r8
80002c56:	e0 8b 00 41 	brhi	80002cd8 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80002c5a:	ef 39 00 08 	ld.ub	r9,r7[8]
80002c5e:	30 38       	mov	r8,3
80002c60:	f0 09 18 00 	cp.b	r9,r8
80002c64:	e0 8b 00 3a 	brhi	80002cd8 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002c68:	0a 9a       	mov	r10,r5
80002c6a:	6e 0b       	ld.w	r11,r7[0x0]
80002c6c:	0c 9c       	mov	r12,r6
80002c6e:	f0 1f 00 1d 	mcall	80002ce0 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002c72:	58 1c       	cp.w	r12,1
80002c74:	c3 20       	breq	80002cd8 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002c76:	0f c8       	ld.ub	r8,r7[0x4]
80002c78:	30 99       	mov	r9,9
80002c7a:	f2 08 18 00 	cp.b	r8,r9
80002c7e:	c0 51       	brne	80002c88 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002c80:	6c 18       	ld.w	r8,r6[0x4]
80002c82:	b1 b8       	sbr	r8,0x11
80002c84:	8d 18       	st.w	r6[0x4],r8
80002c86:	c0 68       	rjmp	80002c92 <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002c88:	6c 19       	ld.w	r9,r6[0x4]
80002c8a:	20 58       	sub	r8,5
80002c8c:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002c90:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002c92:	6c 19       	ld.w	r9,r6[0x4]
80002c94:	ef 3a 00 08 	ld.ub	r10,r7[8]
80002c98:	0f d8       	ld.ub	r8,r7[0x5]
80002c9a:	a9 78       	lsl	r8,0x9
80002c9c:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002ca0:	12 48       	or	r8,r9
80002ca2:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002ca4:	8e 38       	ld.sh	r8,r7[0x6]
80002ca6:	30 29       	mov	r9,2
80002ca8:	f2 08 19 00 	cp.h	r8,r9
80002cac:	e0 88 00 09 	brls	80002cbe <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002cb0:	6c 18       	ld.w	r8,r6[0x4]
80002cb2:	ad b8       	sbr	r8,0xd
80002cb4:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002cb6:	8e b8       	ld.uh	r8,r7[0x6]
80002cb8:	20 28       	sub	r8,2
80002cba:	8d a8       	st.w	r6[0x28],r8
80002cbc:	c0 68       	rjmp	80002cc8 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002cbe:	6c 19       	ld.w	r9,r6[0x4]
80002cc0:	5c 78       	castu.h	r8
80002cc2:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002cc6:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002cc8:	6c 18       	ld.w	r8,r6[0x4]
80002cca:	e0 18 ff f0 	andl	r8,0xfff0
80002cce:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002cd0:	35 08       	mov	r8,80
80002cd2:	8d 08       	st.w	r6[0x0],r8
80002cd4:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002cd8:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002cdc:	80 00       	ld.sh	r0,r0[0x0]
80002cde:	2b ec       	sub	r12,-66
80002ce0:	80 00       	ld.sh	r0,r0[0x0]
80002ce2:	2b 2c       	sub	r12,-78

80002ce4 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002ce4:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002ce8:	fe c0 f4 e8 	sub	r0,pc,-2840

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002cec:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002cf0:	d5 53       	csrf	0x15
  cp      r0, r1
80002cf2:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002cf4:	e0 61 0c 20 	mov	r1,3104
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80002cf8:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80002cfa:	c0 72       	brcc	80002d08 <idata_load_loop_end>
  cp      r0, r1
80002cfc:	fe c2 f1 2c 	sub	r2,pc,-3796

80002d00 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002d00:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80002d02:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80002d04:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80002d06:	cf d3       	brcs	80002d00 <idata_load_loop>

80002d08 <idata_load_loop_end>:
  mov     r2, 0
80002d08:	e0 60 0c 20 	mov	r0,3104
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002d0c:	e0 61 ed 48 	mov	r1,60744
  cp      r0, r1
  brlo    udata_clear_loop
80002d10:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002d12:	c0 62       	brcc	80002d1e <udata_clear_loop_end>
80002d14:	30 02       	mov	r2,0
80002d16:	30 03       	mov	r3,0

80002d18 <udata_clear_loop>:
80002d18:	a1 22       	st.d	r0++,r2
80002d1a:	02 30       	cp.w	r0,r1
80002d1c:	cf e3       	brcs	80002d18 <udata_clear_loop>

80002d1e <udata_clear_loop_end>:
80002d1e:	fe cf fe be 	sub	pc,pc,-322
80002d22:	d7 03       	nop

80002d24 <sysclk_init>:

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002d24:	5e fc       	retal	r12

80002d26 <User_Binbcd>:
/*----------------------------------------------------------------------*/
/*  convert int to ascii,  e.g., 1 => '0x31'                            */
/*----------------------------------------------------------------------*/
static uint16_t User_Binbcd(uint16_t User_Bin)
{
    User_Bin=User_Bin&0x0f;
80002d26:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
    User_Bin=User_Bin+0x30;
    return User_Bin;
}
80002d2a:	2d 0c       	sub	r12,-48
80002d2c:	5e fc       	retal	r12
80002d2e:	d7 03       	nop

80002d30 <tc_irq_dsp>:
/*   ADC TO DSP TO DAC INTERRUPT
        Both Continuously and One shot 
*/
/*---------------------------------------------------------------------*/
ISR(tc_irq_dsp,AVR32_TC0_IRQ0,AVR32_INTC_INT3)
{
80002d30:	d4 01       	pushm	lr
	tc_read_sr(TC, TC_CHANNEL);
80002d32:	30 0b       	mov	r11,0
80002d34:	fe 7c 38 00 	mov	r12,-51200
80002d38:	f0 1f 00 21 	mcall	80002dbc <tc_irq_dsp+0x8c>
	//put the ADC data to DAC and DSP buffers
	switch (DSP_STATE)
80002d3c:	4a 18       	lddpc	r8,80002dc0 <tc_irq_dsp+0x90>
80002d3e:	90 08       	ld.sh	r8,r8[0x0]
80002d40:	30 19       	mov	r9,1
80002d42:	f2 08 19 00 	cp.h	r8,r9
80002d46:	c0 70       	breq	80002d54 <tc_irq_dsp+0x24>
80002d48:	c1 43       	brcs	80002d70 <tc_irq_dsp+0x40>
80002d4a:	30 29       	mov	r9,2
80002d4c:	f2 08 19 00 	cp.h	r8,r9
80002d50:	c1 71       	brne	80002d7e <tc_irq_dsp+0x4e>
80002d52:	c1 38       	rjmp	80002d78 <tc_irq_dsp+0x48>
	{
		case LOADING :		// load the data of "Buffer_Size" to the DSP buffer
			DSP_BUFFER_PTR[tc_tick]=(ADC_PDCA_BUFFER1[2*tc_tick]<<6)/2;
80002d54:	49 c8       	lddpc	r8,80002dc4 <tc_irq_dsp+0x94>
80002d56:	70 09       	ld.w	r9,r8[0x0]
80002d58:	70 0a       	ld.w	r10,r8[0x0]
80002d5a:	a1 7a       	lsl	r10,0x1
80002d5c:	49 b8       	lddpc	r8,80002dc8 <tc_irq_dsp+0x98>
80002d5e:	f0 0a 04 1a 	ld.sh	r10,r8[r10<<0x1]
80002d62:	49 b8       	lddpc	r8,80002dcc <tc_irq_dsp+0x9c>
80002d64:	70 08       	ld.w	r8,r8[0x0]
80002d66:	5c 7a       	castu.h	r10
80002d68:	a5 7a       	lsl	r10,0x5
80002d6a:	f0 09 0a 1a 	st.h	r8[r9<<0x1],r10
			break;
80002d6e:	c0 88       	rjmp	80002d7e <tc_irq_dsp+0x4e>
		case PROCESSING:
			gpio_toggle_pin(LED0_GPIO);
80002d70:	32 3c       	mov	r12,35
80002d72:	f0 1f 00 18 	mcall	80002dd0 <tc_irq_dsp+0xa0>
			break;
80002d76:	c0 48       	rjmp	80002d7e <tc_irq_dsp+0x4e>
		case STANDSTILL:
			gpio_toggle_pin(LED3_GPIO);
80002d78:	32 6c       	mov	r12,38
80002d7a:	f0 1f 00 16 	mcall	80002dd0 <tc_irq_dsp+0xa0>
		break;
	}
	tc_tick++;
80002d7e:	49 28       	lddpc	r8,80002dc4 <tc_irq_dsp+0x94>
80002d80:	70 09       	ld.w	r9,r8[0x0]
80002d82:	2f f9       	sub	r9,-1
80002d84:	91 09       	st.w	r8[0x0],r9
	counter++;
80002d86:	49 49       	lddpc	r9,80002dd4 <tc_irq_dsp+0xa4>
80002d88:	72 0a       	ld.w	r10,r9[0x0]
80002d8a:	2f fa       	sub	r10,-1
80002d8c:	93 0a       	st.w	r9[0x0],r10
	if (tc_tick >= Buffer_Size)
80002d8e:	70 08       	ld.w	r8,r8[0x0]
80002d90:	e0 48 0f ff 	cp.w	r8,4095
80002d94:	e0 88 00 11 	brls	80002db6 <tc_irq_dsp+0x86>
	{	
		tc_tick =0;
80002d98:	30 09       	mov	r9,0
80002d9a:	48 b8       	lddpc	r8,80002dc4 <tc_irq_dsp+0x94>
80002d9c:	91 09       	st.w	r8[0x0],r9
		if ( DSP_STATE == LOADING)  DSP_STATE = PROCESSING;	
80002d9e:	48 98       	lddpc	r8,80002dc0 <tc_irq_dsp+0x90>
80002da0:	90 09       	ld.sh	r9,r8[0x0]
80002da2:	30 18       	mov	r8,1
80002da4:	f0 09 19 00 	cp.h	r9,r8
80002da8:	c0 41       	brne	80002db0 <tc_irq_dsp+0x80>
80002daa:	30 09       	mov	r9,0
80002dac:	48 58       	lddpc	r8,80002dc0 <tc_irq_dsp+0x90>
80002dae:	b0 09       	st.h	r8[0x0],r9
		gpio_toggle_pin(LED2_GPIO);
80002db0:	32 2c       	mov	r12,34
80002db2:	f0 1f 00 08 	mcall	80002dd0 <tc_irq_dsp+0xa0>
	}
}
80002db6:	d4 02       	popm	lr
80002db8:	d6 03       	rete
80002dba:	00 00       	add	r0,r0
80002dbc:	80 00       	ld.sh	r0,r0[0x0]
80002dbe:	29 aa       	sub	r10,-102
80002dc0:	00 00       	add	r0,r0
80002dc2:	00 0c       	add	r12,r0
80002dc4:	00 00       	add	r0,r0
80002dc6:	4d 40       	lddpc	r0,80002f14 <main+0xb4>
80002dc8:	00 00       	add	r0,r0
80002dca:	0d 30       	ld.ub	r0,r6++
80002dcc:	80 00       	ld.sh	r0,r0[0x0]
80002dce:	3b 34       	mov	r4,-77
80002dd0:	80 00       	ld.sh	r0,r0[0x0]
80002dd2:	22 ec       	sub	r12,46
80002dd4:	00 00       	add	r0,r0
80002dd6:	ed 44 d4 01 	st.w	r6[-11263],r4

80002dd8 <User_Ext_Trigger_Isr>:
     Use for One Shot DSP 
     Reset DMAs and set DSP state to LOADING and timer tick
*/
/*----------------------------------------------------------------------*/
ISR(User_Ext_Trigger_Isr,AVR32_GPIO_IRQ_1,AVR32_INTC_INT0)
{
80002dd8:	d4 01       	pushm	lr
	gpio_toggle_pin(LED1_GPIO);
80002dda:	34 9c       	mov	r12,73
80002ddc:	f0 1f 00 0c 	mcall	80002e0c <User_Ext_Trigger_Isr+0x34>
	DSP_STATE = LOADING;
80002de0:	30 19       	mov	r9,1
80002de2:	48 c8       	lddpc	r8,80002e10 <User_Ext_Trigger_Isr+0x38>
80002de4:	b0 09       	st.h	r8[0x0],r9
	pdca_enable(PDCA_CHANNEL_ADC);	//reset DMA
80002de6:	30 0c       	mov	r12,0
80002de8:	f0 1f 00 0b 	mcall	80002e14 <User_Ext_Trigger_Isr+0x3c>
	pdca_enable(PDCA_CHANNEL_DAC);	//reset DMA
80002dec:	30 1c       	mov	r12,1
80002dee:	f0 1f 00 0a 	mcall	80002e14 <User_Ext_Trigger_Isr+0x3c>
	tc_tick=0;						//reset index
80002df2:	30 08       	mov	r8,0
80002df4:	48 99       	lddpc	r9,80002e18 <User_Ext_Trigger_Isr+0x40>
80002df6:	93 08       	st.w	r9[0x0],r8
	counter =0;						//reset counter
80002df8:	48 99       	lddpc	r9,80002e1c <User_Ext_Trigger_Isr+0x44>
80002dfa:	93 08       	st.w	r9[0x0],r8
	gpio_clear_pin_interrupt_flag(Ext_Trigger_Pin);
80002dfc:	30 fc       	mov	r12,15
80002dfe:	f0 1f 00 09 	mcall	80002e20 <User_Ext_Trigger_Isr+0x48>
	gpio_disable_pin_interrupt(Ext_Trigger_Pin);
80002e02:	30 fc       	mov	r12,15
80002e04:	f0 1f 00 08 	mcall	80002e24 <User_Ext_Trigger_Isr+0x4c>
}
80002e08:	d4 02       	popm	lr
80002e0a:	d6 03       	rete
80002e0c:	80 00       	ld.sh	r0,r0[0x0]
80002e0e:	22 ec       	sub	r12,46
80002e10:	00 00       	add	r0,r0
80002e12:	00 0c       	add	r12,r0
80002e14:	80 00       	ld.sh	r0,r0[0x0]
80002e16:	24 98       	sub	r8,73
80002e18:	00 00       	add	r0,r0
80002e1a:	4d 40       	lddpc	r0,80002f68 <main+0x108>
80002e1c:	00 00       	add	r0,r0
80002e1e:	ed 44 80 00 	st.w	r6[-32768],r4
80002e22:	23 5e       	sub	lr,53
80002e24:	80 00       	ld.sh	r0,r0[0x0]
80002e26:	23 48       	sub	r8,52

80002e28 <pdca_dac_handler>:
{
        pdca_reload_channel(PDCA_CHANNEL_ADC,
                (void *)ADC_PDCA_BUFFER1, Buffer_Size*2);
}
ISR(pdca_dac_handler, AVR32_PDCA_IRQ_1, 1)
{
80002e28:	d4 01       	pushm	lr
        pdca_reload_channel(PDCA_CHANNEL_DAC,
80002e2a:	e0 6a 10 00 	mov	r10,4096
80002e2e:	48 48       	lddpc	r8,80002e3c <pdca_dac_handler+0x14>
80002e30:	70 0b       	ld.w	r11,r8[0x0]
80002e32:	30 1c       	mov	r12,1
80002e34:	f0 1f 00 03 	mcall	80002e40 <pdca_dac_handler+0x18>
                DAC_BUFFER_PTR, Buffer_Size);
}
80002e38:	d4 02       	popm	lr
80002e3a:	d6 03       	rete
80002e3c:	80 00       	ld.sh	r0,r0[0x0]
80002e3e:	3b 30       	mov	r0,-77
80002e40:	80 00       	ld.sh	r0,r0[0x0]
80002e42:	25 08       	sub	r8,80

80002e44 <pdca_adc_handler>:
 * \param size           size of the data block to load
*/
/*----------------------------------------------------------------------*/
__attribute__((__interrupt__))
ISR(pdca_adc_handler, AVR32_PDCA_IRQ_0, 0)
{
80002e44:	d4 01       	pushm	lr
        pdca_reload_channel(PDCA_CHANNEL_ADC,
80002e46:	e0 6a 20 00 	mov	r10,8192
80002e4a:	48 4b       	lddpc	r11,80002e58 <pdca_adc_handler+0x14>
80002e4c:	30 0c       	mov	r12,0
80002e4e:	f0 1f 00 04 	mcall	80002e5c <pdca_adc_handler+0x18>
                (void *)ADC_PDCA_BUFFER1, Buffer_Size*2);
}
80002e52:	d4 02       	popm	lr
80002e54:	d6 03       	rete
80002e56:	00 00       	add	r0,r0
80002e58:	00 00       	add	r0,r0
80002e5a:	0d 30       	ld.ub	r0,r6++
80002e5c:	80 00       	ld.sh	r0,r0[0x0]
80002e5e:	25 08       	sub	r8,80

80002e60 <main>:

/************************************************************************/
/*                               MAIN                                   */
/************************************************************************/
int main (void)
{
80002e60:	d4 31       	pushm	r0-r7,lr
80002e62:	21 0d       	sub	sp,64
    board_init();
80002e64:	f0 1f 00 be 	mcall	8000315c <main+0x2fc>
    sysclk_init();
80002e68:	f0 1f 00 be 	mcall	80003160 <main+0x300>
        {AVR32_ADC_AD_1_PIN,AVR32_ADC_AD_1_FUNCTION},				// Configure pin J2's ADC1 as ADC
        {AVR32_ADC_AD_5_PIN,AVR32_ADC_AD_5_FUNCTION},				// Configure pin J2's ADC5 as ADC
        {USART_TXD_PIN,USART_TXD_FUNCTION},
        {USART_RXD_PIN,USART_RXD_FUNCTION},
        {65,2},
    };
80002e6c:	fe f9 02 f8 	ld.w	r9,pc[760]
80002e70:	fa c8 ff f8 	sub	r8,sp,-8
80002e74:	f2 ea 00 00 	ld.d	r10,r9[0]
80002e78:	f0 eb 00 00 	st.d	r8[0],r10
80002e7c:	f2 ea 00 08 	ld.d	r10,r9[8]
80002e80:	f0 eb 00 08 	st.d	r8[8],r10
80002e84:	f2 ea 00 10 	ld.d	r10,r9[16]
80002e88:	f0 eb 00 10 	st.d	r8[16],r10
80002e8c:	f2 ea 00 18 	ld.d	r10,r9[24]
80002e90:	f0 eb 00 18 	st.d	r8[24],r10
80002e94:	f2 ea 00 20 	ld.d	r10,r9[32]
80002e98:	f0 eb 00 20 	st.d	r8[32],r10
80002e9c:	f2 ea 00 28 	ld.d	r10,r9[40]
80002ea0:	f0 eb 00 28 	st.d	r8[40],r10
80002ea4:	f2 ea 00 30 	ld.d	r10,r9[48]
80002ea8:	f0 eb 00 30 	st.d	r8[48],r10
        .stopbits    = USART_1_STOPBIT,
    };

    //Clock options
    static pm_freq_param_t clockSettings;
        clockSettings.cpu_f = U_CPU_F;
80002eac:	fe fc 02 bc 	ld.w	r12,pc[700]
80002eb0:	e0 68 87 00 	mov	r8,34560
80002eb4:	ea 18 03 93 	orh	r8,0x393
80002eb8:	99 08       	st.w	r12[0x0],r8
        clockSettings.osc0_f = U_OSC0_F;
80002eba:	e0 68 1b 00 	mov	r8,6912
80002ebe:	ea 18 00 b7 	orh	r8,0xb7
80002ec2:	99 28       	st.w	r12[0x8],r8
        clockSettings.osc0_startup = U_OSC0_START;
80002ec4:	30 38       	mov	r8,3
80002ec6:	99 38       	st.w	r12[0xc],r8
        clockSettings.pba_f = U_PBA_F;
80002ec8:	e0 68 c3 80 	mov	r8,50048
80002ecc:	ea 18 01 c9 	orh	r8,0x1c9
80002ed0:	99 18       	st.w	r12[0x4],r8

    //set clock with the options
    if (pm_configure_clocks(&clockSettings) != PM_FREQ_STATUS_OK)
80002ed2:	f0 1f 00 a7 	mcall	8000316c <main+0x30c>
80002ed6:	c0 20       	breq	80002eda <main+0x7a>
80002ed8:	c0 08       	rjmp	80002ed8 <main+0x78>
    }
	/*  Set ADC Sampling Frequency */ 
    uint32_t ADC_FREQ = ADC_FREQUENCY;

    //enable pins
    gpio_enable_module(usart_gpio_map,
80002eda:	30 7b       	mov	r11,7
80002edc:	fa cc ff f8 	sub	r12,sp,-8
80002ee0:	f0 1f 00 a4 	mcall	80003170 <main+0x310>
        sizeof(usart_gpio_map) / sizeof(usart_gpio_map[0]));

    //ADC prescal setting
    //ADC clock = clock / ((prescal+1)*2)
    AVR32_ADC.mr |= 0x01 << AVR32_ADC_MR_PRESCAL_OFFSET;
80002ee4:	fe 77 3c 00 	mov	r7,-50176
80002ee8:	6e 18       	ld.w	r8,r7[0x4]
80002eea:	a9 a8       	sbr	r8,0x8
80002eec:	8f 18       	st.w	r7[0x4],r8
    /*ADC Trigger setting. Trigger is Timer 0 channel 0 RA */
    AVR32_ADC.mr |= 0x00 << AVR32_ADC_MR_TRGSEL_OFFSET;
80002eee:	6e 18       	ld.w	r8,r7[0x4]
80002ef0:	8f 18       	st.w	r7[0x4],r8
    AVR32_ADC.mr |= 0x01 << AVR32_ADC_MR_TRGEN_OFFSET;
80002ef2:	6e 18       	ld.w	r8,r7[0x4]
80002ef4:	a1 a8       	sbr	r8,0x0
80002ef6:	8f 18       	st.w	r7[0x4],r8
    adc_configure(&AVR32_ADC);
80002ef8:	0e 9c       	mov	r12,r7
80002efa:	f0 1f 00 9f 	mcall	80003174 <main+0x314>
    adc_enable(&AVR32_ADC,AVR32_ADC_CH1);        // enable ADC1
80002efe:	30 1b       	mov	r11,1
80002f00:	0e 9c       	mov	r12,r7
80002f02:	f0 1f 00 9e 	mcall	80003178 <main+0x318>
    adc_enable(&AVR32_ADC,AVR32_ADC_CH5);        // enable ADC5
80002f06:	30 5b       	mov	r11,5
80002f08:	0e 9c       	mov	r12,r7
80002f0a:	f0 1f 00 9c 	mcall	80003178 <main+0x318>

    //DAC init, sampling frequency = FOSC0/256;
    abdac_set_dac_hz(&AVR32_ABDAC,FOSC0,FOSC0/256);
80002f0e:	e0 6a b7 1b 	mov	r10,46875
80002f12:	e0 6b 1b 00 	mov	r11,6912
80002f16:	ea 1b 00 b7 	orh	r11,0xb7
80002f1a:	fe 7c 40 00 	mov	r12,-49152
80002f1e:	f0 1f 00 98 	mcall	8000317c <main+0x31c>
    abdac_enable(&AVR32_ABDAC);
80002f22:	fe 7c 40 00 	mov	r12,-49152
80002f26:	f0 1f 00 97 	mcall	80003180 <main+0x320>

	// External trigger 
	gpio_enable_gpio_pin(Ext_Trigger_Pin);
80002f2a:	30 fc       	mov	r12,15
80002f2c:	f0 1f 00 96 	mcall	80003184 <main+0x324>
	gpio_configure_pin(Ext_Trigger_Pin,GPIO_DIR_INPUT);
80002f30:	30 0b       	mov	r11,0
80002f32:	30 fc       	mov	r12,15
80002f34:	f0 1f 00 95 	mcall	80003188 <main+0x328>
	gpio_enable_pin_interrupt(Ext_Trigger_Pin,GPIO_RISING_EDGE);
80002f38:	30 1b       	mov	r11,1
80002f3a:	30 fc       	mov	r12,15
80002f3c:	f0 1f 00 94 	mcall	8000318c <main+0x32c>
    //Usart init wait until success
    while(usart_init_rs232(USART,&User_Usart_OPT,U_PBA_F) != USART_SUCCESS);
80002f40:	fe f6 02 50 	ld.w	r6,pc[592]
80002f44:	e0 67 c3 80 	mov	r7,50048
80002f48:	ea 17 01 c9 	orh	r7,0x1c9
80002f4c:	fe 75 18 00 	mov	r5,-59392
80002f50:	0e 9a       	mov	r10,r7
80002f52:	0c 9b       	mov	r11,r6
80002f54:	0a 9c       	mov	r12,r5
80002f56:	f0 1f 00 90 	mcall	80003194 <main+0x334>
80002f5a:	cf b1       	brne	80002f50 <main+0xf0>
    //test if communication is ok
    usart_write_line(USART,"USART OK!! \r\n");
80002f5c:	fe fb 02 3c 	ld.w	r11,pc[572]
80002f60:	fe 7c 18 00 	mov	r12,-59392
80002f64:	f0 1f 00 8e 	mcall	8000319c <main+0x33c>

    // Initialize all PDCA channels to be used 
    pdca_init_channel(PDCA_CHANNEL_ADC,&ADC_PDCA_OPT);
80002f68:	fe fb 02 38 	ld.w	r11,pc[568]
80002f6c:	30 0c       	mov	r12,0
80002f6e:	f0 1f 00 8e 	mcall	800031a4 <main+0x344>
    pdca_init_channel(PDCA_CHANNEL_DAC,&DAC_PDCA_OPT);
80002f72:	fe fb 02 36 	ld.w	r11,pc[566]
80002f76:	30 1c       	mov	r12,1
80002f78:	f0 1f 00 8b 	mcall	800031a4 <main+0x344>

    //All PDCA channels need to enable corresponding interrupts
    pdca_enable_interrupt_transfer_complete(PDCA_CHANNEL_ADC);
80002f7c:	30 0c       	mov	r12,0
80002f7e:	f0 1f 00 8c 	mcall	800031ac <main+0x34c>
    pdca_enable_interrupt_reload_counter_zero(PDCA_CHANNEL_DAC);
80002f82:	30 1c       	mov	r12,1
80002f84:	f0 1f 00 8b 	mcall	800031b0 <main+0x350>
/*               Interrupt initiate, register and enable.               */
/*----------------------------------------------------------------------*/
static void pdca_set_irq(void)
{
	#if __GNUC__
	    INTC_init_interrupts();
80002f88:	f0 1f 00 8b 	mcall	800031b4 <main+0x354>

    //All PDCA interrupts need to be registered here
	    INTC_register_interrupt(&pdca_adc_handler, AVR32_PDCA_IRQ_0,
80002f8c:	30 0a       	mov	r10,0
80002f8e:	36 0b       	mov	r11,96
80002f90:	fe fc 02 28 	ld.w	r12,pc[552]
80002f94:	f0 1f 00 8a 	mcall	800031bc <main+0x35c>
		        AVR32_INTC_INT0);
		INTC_register_interrupt(&pdca_dac_handler, AVR32_PDCA_IRQ_1,
80002f98:	30 0a       	mov	r10,0
80002f9a:	36 1b       	mov	r11,97
80002f9c:	fe fc 02 24 	ld.w	r12,pc[548]
80002fa0:	f0 1f 00 87 	mcall	800031bc <main+0x35c>
			    AVR32_INTC_INT0);
		INTC_register_interrupt(&User_Ext_Trigger_Isr,AVR32_GPIO_IRQ_1,AVR32_INTC_INT3);
80002fa4:	30 3a       	mov	r10,3
80002fa6:	34 1b       	mov	r11,65
80002fa8:	fe fc 02 1c 	ld.w	r12,pc[540]
80002fac:	f0 1f 00 84 	mcall	800031bc <main+0x35c>
		INTC_register_interrupt(&tc_irq_dsp,AVR32_TC0_IRQ0,AVR32_INTC_INT2);
80002fb0:	30 2a       	mov	r10,2
80002fb2:	e0 6b 01 c0 	mov	r11,448
80002fb6:	fe fc 02 12 	ld.w	r12,pc[530]
80002fba:	f0 1f 00 81 	mcall	800031bc <main+0x35c>
	#endif

    /* Enable all interrupt/exception. */
    Enable_global_interrupt();
80002fbe:	d5 03       	csrf	0x10

    //call interrupt settings
    pdca_set_irq();

    //Enable all channels before the data begin to be read or written 
    pdca_enable(PDCA_CHANNEL_ADC);
80002fc0:	30 0c       	mov	r12,0
80002fc2:	f0 1f 00 83 	mcall	800031cc <main+0x36c>
    pdca_enable(PDCA_CHANNEL_DAC);
80002fc6:	30 1c       	mov	r12,1
80002fc8:	f0 1f 00 81 	mcall	800031cc <main+0x36c>
        .cpas  = 0,
        .lovrs = 0,
        .covfs = 0
    };
    // Initialize the timer/counter (TC).
    tc_init_waveform(tc, &waveform_opt);
80002fcc:	fe fb 02 04 	ld.w	r11,pc[516]
80002fd0:	fe 7c 38 00 	mov	r12,-51200
80002fd4:	f0 1f 00 80 	mcall	800031d4 <main+0x374>
    /*set freq for both Rc and Ra. RC freq = ADC freq            */
    tc_write_rc(tc, TC_CHANNEL, (U_PBA_F / 8 /ADC_FREQ));
80002fd8:	35 0a       	mov	r10,80
80002fda:	30 0b       	mov	r11,0
80002fdc:	fe 7c 38 00 	mov	r12,-51200
80002fe0:	f0 1f 00 7e 	mcall	800031d8 <main+0x378>
    tc_write_ra(tc, TC_CHANNEL, (U_PBA_F/ 8 / 90000));
80002fe4:	32 9a       	mov	r10,41
80002fe6:	30 0b       	mov	r11,0
80002fe8:	fe 7c 38 00 	mov	r12,-51200
80002fec:	f0 1f 00 7c 	mcall	800031dc <main+0x37c>
    // configure the timer interrupt
    tc_configure_interrupts(tc,TC_CHANNEL, &tc_interrupt);
80002ff0:	4f ca       	lddpc	r10,800031e0 <main+0x380>
80002ff2:	30 0b       	mov	r11,0
80002ff4:	fe 7c 38 00 	mov	r12,-51200
80002ff8:	f0 1f 00 7b 	mcall	800031e4 <main+0x384>
    // Start the timer/counter.
    tc_start(tc, TC_CHANNEL);
80002ffc:	30 0b       	mov	r11,0
80002ffe:	fe 7c 38 00 	mov	r12,-51200
80003002:	f0 1f 00 7a 	mcall	800031e8 <main+0x388>
		}
		if (DSP_STATE==PROCESSING)
		{
			for (int ind=0;ind< Buffer_Size;ind++)	
			{
				DAC_BUFFER_PTR[2*ind] = (DSP_REAL_BUFFER[ind]*2^0x8000);	
80003006:	4f a8       	lddpc	r8,800031ec <main+0x38c>
80003008:	70 08       	ld.w	r8,r8[0x0]
8000300a:	50 18       	stdsp	sp[0x4],r8
8000300c:	4f 93       	lddpc	r3,800031f0 <main+0x390>
8000300e:	50 03       	stdsp	sp[0x0],r3
    e.g., 123 => {0x30,0x30,0x31,0x32,0x33,','}              */
/*----------------------------------------------------------------------*/
static void User_Usart_int2str(uint32_t User_int32)
{
		usart_putchar(USART,User_Binbcd( User_int32/10000)) ;
		usart_putchar(USART,User_Binbcd( User_int32%10000/1000)) ;
80003010:	e0 60 4d d3 	mov	r0,19923
80003014:	ea 10 10 62 	orh	r0,0x1062
    pdca_enable(PDCA_CHANNEL_DAC);
    //timer init
    tc_init(tc,ADC_FREQ);
    while (1)
    {	
		if (counter >= ADC_FREQ) // control the time when the next Ext_Trigger is valid
80003018:	4f 7a       	lddpc	r10,800031f4 <main+0x394>
8000301a:	74 08       	ld.w	r8,r10[0x0]
8000301c:	e0 48 b7 1a 	cp.w	r8,46874
80003020:	e0 88 00 06 	brls	8000302c <main+0x1cc>
		{						 // counter = the number of cycles; "counter = ADC_FREQ" corresponds to the time of 1 second
			gpio_enable_pin_interrupt(Ext_Trigger_Pin,GPIO_RISING_EDGE);  // "counter = ADC_FREQ/1000" corresponds to 1 ms
80003024:	30 1b       	mov	r11,1
80003026:	30 fc       	mov	r12,15
80003028:	f0 1f 00 59 	mcall	8000318c <main+0x32c>
		}
		if (DSP_STATE==PROCESSING)
8000302c:	4f 38       	lddpc	r8,800031f8 <main+0x398>
8000302e:	90 08       	ld.sh	r8,r8[0x0]
80003030:	58 08       	cp.w	r8,0
80003032:	cf 31       	brne	80003018 <main+0x1b8>
80003034:	40 19       	lddsp	r9,sp[0x4]
		{
			for (int ind=0;ind< Buffer_Size;ind++)	
			{
				DAC_BUFFER_PTR[2*ind] = (DSP_REAL_BUFFER[ind]*2^0x8000);	
80003036:	e6 08 04 1a 	ld.sh	r10,r3[r8<<0x1]
8000303a:	a1 7a       	lsl	r10,0x1
8000303c:	ee 1a ff ff 	eorh	r10,0xffff
80003040:	ec 1a 80 00 	eorl	r10,0x8000
80003044:	b2 0a       	st.h	r9[0x0],r10
				DAC_BUFFER_PTR[2*ind+1]=(DSP_REAL_BUFFER[ind]*2^0x8000);	
80003046:	e6 08 04 1a 	ld.sh	r10,r3[r8<<0x1]
8000304a:	a1 7a       	lsl	r10,0x1
8000304c:	ee 1a ff ff 	eorh	r10,0xffff
80003050:	ec 1a 80 00 	eorl	r10,0x8000
80003054:	b2 1a       	st.h	r9[0x2],r10
		{						 // counter = the number of cycles; "counter = ADC_FREQ" corresponds to the time of 1 second
			gpio_enable_pin_interrupt(Ext_Trigger_Pin,GPIO_RISING_EDGE);  // "counter = ADC_FREQ/1000" corresponds to 1 ms
		}
		if (DSP_STATE==PROCESSING)
		{
			for (int ind=0;ind< Buffer_Size;ind++)	
80003056:	2f f8       	sub	r8,-1
80003058:	2f c9       	sub	r9,-4
8000305a:	e0 48 10 00 	cp.w	r8,4096
8000305e:	ce c1       	brne	80003036 <main+0x1d6>
			}
/*......................................................................*/
/*            Do DSP HERE                                               */
/*......................................................................*/

	dsp16_trans_realcomplexfft(&DSP_COMP_BUFFER,&DSP_REAL_BUFFER,N_of_bits);
80003060:	4e 77       	lddpc	r7,800031fc <main+0x39c>
80003062:	30 aa       	mov	r10,10
80003064:	40 0b       	lddsp	r11,sp[0x0]
80003066:	0e 9c       	mov	r12,r7
80003068:	f0 1f 00 66 	mcall	80003200 <main+0x3a0>
	dsp16_vect_complex_abs(&DSP_REAL_BUFFER,&DSP_COMP_BUFFER,DATA_SIZE);
8000306c:	e0 6a 04 00 	mov	r10,1024
80003070:	0e 9b       	mov	r11,r7
80003072:	40 0c       	lddsp	r12,sp[0x0]
80003074:	f0 1f 00 64 	mcall	80003204 <main+0x3a4>
80003078:	30 04       	mov	r4,0
/*  Convert a number to ascii array and put to the usart buffer end with ','
    e.g., 123 => {0x30,0x30,0x31,0x32,0x33,','}              */
/*----------------------------------------------------------------------*/
static void User_Usart_int2str(uint32_t User_int32)
{
		usart_putchar(USART,User_Binbcd( User_int32/10000)) ;
8000307a:	fe 75 18 00 	mov	r5,-59392
		usart_putchar(USART,User_Binbcd( User_int32%10000/1000)) ;
		usart_putchar(USART,User_Binbcd( User_int32%1000/100)) ;
8000307e:	e0 62 85 1f 	mov	r2,34079
80003082:	ea 12 51 eb 	orh	r2,0x51eb
		usart_putchar(USART,User_Binbcd( User_int32%100/10)) ;
80003086:	e0 61 cc cd 	mov	r1,52429
8000308a:	ea 11 cc cc 	orh	r1,0xcccc
	dsp16_trans_realcomplexfft(&DSP_COMP_BUFFER,&DSP_REAL_BUFFER,N_of_bits);
	dsp16_vect_complex_abs(&DSP_REAL_BUFFER,&DSP_COMP_BUFFER,DATA_SIZE);
	
			for (int ind=0;ind<= DATA_SIZE;ind =ind++){

				User_Usart_int2str(DSP_REAL_BUFFER[ind]);
8000308e:	e6 04 04 16 	ld.sh	r6,r3[r4<<0x1]
80003092:	5c 76       	castu.h	r6
/*  Convert a number to ascii array and put to the usart buffer end with ','
    e.g., 123 => {0x30,0x30,0x31,0x32,0x33,','}              */
/*----------------------------------------------------------------------*/
static void User_Usart_int2str(uint32_t User_int32)
{
		usart_putchar(USART,User_Binbcd( User_int32/10000)) ;
80003094:	e0 6a 17 59 	mov	r10,5977
80003098:	ea 1a d1 b7 	orh	r10,0xd1b7
8000309c:	ec 0a 06 48 	mulu.d	r8,r6,r10
800030a0:	f2 07 16 0d 	lsr	r7,r9,0xd
800030a4:	0e 9c       	mov	r12,r7
800030a6:	5c 7c       	castu.h	r12
800030a8:	f0 1f 00 58 	mcall	80003208 <main+0x3a8>
800030ac:	f7 dc c0 10 	bfextu	r11,r12,0x0,0x10
800030b0:	0a 9c       	mov	r12,r5
800030b2:	f0 1f 00 57 	mcall	8000320c <main+0x3ac>
		usart_putchar(USART,User_Binbcd( User_int32%10000/1000)) ;
800030b6:	e0 68 27 10 	mov	r8,10000
800030ba:	ee 08 02 49 	mul	r9,r7,r8
800030be:	ec 09 01 09 	sub	r9,r6,r9
800030c2:	f2 00 06 48 	mulu.d	r8,r9,r0
800030c6:	f9 d9 c0 d0 	bfextu	r12,r9,0x6,0x10
800030ca:	f0 1f 00 50 	mcall	80003208 <main+0x3a8>
800030ce:	f7 dc c0 10 	bfextu	r11,r12,0x0,0x10
800030d2:	0a 9c       	mov	r12,r5
800030d4:	f0 1f 00 4e 	mcall	8000320c <main+0x3ac>
		usart_putchar(USART,User_Binbcd( User_int32%1000/100)) ;
800030d8:	ec 00 06 48 	mulu.d	r8,r6,r0
800030dc:	a7 89       	lsr	r9,0x6
800030de:	e0 6a 03 e8 	mov	r10,1000
800030e2:	b5 39       	mul	r9,r10
800030e4:	ec 09 01 09 	sub	r9,r6,r9
800030e8:	f2 02 06 48 	mulu.d	r8,r9,r2
800030ec:	f9 d9 c0 b0 	bfextu	r12,r9,0x5,0x10
800030f0:	f0 1f 00 46 	mcall	80003208 <main+0x3a8>
800030f4:	f7 dc c0 10 	bfextu	r11,r12,0x0,0x10
800030f8:	0a 9c       	mov	r12,r5
800030fa:	f0 1f 00 45 	mcall	8000320c <main+0x3ac>
		usart_putchar(USART,User_Binbcd( User_int32%100/10)) ;
800030fe:	ec 02 06 48 	mulu.d	r8,r6,r2
80003102:	a5 99       	lsr	r9,0x5
80003104:	f2 09 10 64 	mul	r9,r9,100
80003108:	ec 09 01 09 	sub	r9,r6,r9
8000310c:	f2 01 06 48 	mulu.d	r8,r9,r1
80003110:	f9 d9 c0 70 	bfextu	r12,r9,0x3,0x10
80003114:	f0 1f 00 3d 	mcall	80003208 <main+0x3a8>
80003118:	f7 dc c0 10 	bfextu	r11,r12,0x0,0x10
8000311c:	0a 9c       	mov	r12,r5
8000311e:	f0 1f 00 3c 	mcall	8000320c <main+0x3ac>
		usart_putchar(USART,User_Binbcd( User_int32%10)) ;
80003122:	ec 01 06 48 	mulu.d	r8,r6,r1
80003126:	f2 08 16 03 	lsr	r8,r9,0x3
8000312a:	f0 08 00 28 	add	r8,r8,r8<<0x2
8000312e:	ec 08 01 16 	sub	r6,r6,r8<<0x1
80003132:	f9 d6 c0 10 	bfextu	r12,r6,0x0,0x10
80003136:	f0 1f 00 35 	mcall	80003208 <main+0x3a8>
8000313a:	f7 dc c0 10 	bfextu	r11,r12,0x0,0x10
8000313e:	0a 9c       	mov	r12,r5
80003140:	f0 1f 00 33 	mcall	8000320c <main+0x3ac>
	dsp16_vect_complex_abs(&DSP_REAL_BUFFER,&DSP_COMP_BUFFER,DATA_SIZE);
	
			for (int ind=0;ind<= DATA_SIZE;ind =ind++){

				User_Usart_int2str(DSP_REAL_BUFFER[ind]);
				usart_write_line(USART,",");
80003144:	4b 3b       	lddpc	r11,80003210 <main+0x3b0>
80003146:	0a 9c       	mov	r12,r5
80003148:	f0 1f 00 15 	mcall	8000319c <main+0x33c>
/*......................................................................*/

	dsp16_trans_realcomplexfft(&DSP_COMP_BUFFER,&DSP_REAL_BUFFER,N_of_bits);
	dsp16_vect_complex_abs(&DSP_REAL_BUFFER,&DSP_COMP_BUFFER,DATA_SIZE);
	
			for (int ind=0;ind<= DATA_SIZE;ind =ind++){
8000314c:	2f f4       	sub	r4,-1
8000314e:	e0 44 04 01 	cp.w	r4,1025
80003152:	c9 e1       	brne	8000308e <main+0x22e>
			}



/*......................................................................*/
			DSP_STATE=STANDSTILL;  // 
80003154:	30 29       	mov	r9,2
80003156:	4a 98       	lddpc	r8,800031f8 <main+0x398>
80003158:	b0 09       	st.h	r8[0x0],r9
8000315a:	c5 fb       	rjmp	80003018 <main+0x1b8>
8000315c:	80 00       	ld.sh	r0,r0[0x0]
8000315e:	20 08       	sub	r8,0
80003160:	80 00       	ld.sh	r0,r0[0x0]
80003162:	2d 24       	sub	r4,-46
80003164:	80 00       	ld.sh	r0,r0[0x0]
80003166:	3b 64       	mov	r4,-74
80003168:	00 00       	add	r0,r0
8000316a:	4d 30       	lddpc	r0,800032b4 <dsp16_vect_complex_abs+0x9c>
8000316c:	80 00       	ld.sh	r0,r0[0x0]
8000316e:	26 e0       	sub	r0,110
80003170:	80 00       	ld.sh	r0,r0[0x0]
80003172:	21 ec       	sub	r12,30
80003174:	80 00       	ld.sh	r0,r0[0x0]
80003176:	21 0a       	sub	r10,16
80003178:	80 00       	ld.sh	r0,r0[0x0]
8000317a:	21 1c       	sub	r12,17
8000317c:	80 00       	ld.sh	r0,r0[0x0]
8000317e:	20 8c       	sub	r12,8
80003180:	80 00       	ld.sh	r0,r0[0x0]
80003182:	20 78       	sub	r8,7
80003184:	80 00       	ld.sh	r0,r0[0x0]
80003186:	22 1c       	sub	r12,33
80003188:	80 00       	ld.sh	r0,r0[0x0]
8000318a:	22 34       	sub	r4,35
8000318c:	80 00       	ld.sh	r0,r0[0x0]
8000318e:	23 02       	sub	r2,48
80003190:	00 00       	add	r0,r0
80003192:	00 10       	sub	r0,r0
80003194:	80 00       	ld.sh	r0,r0[0x0]
80003196:	2c 18       	sub	r8,-63
80003198:	80 00       	ld.sh	r0,r0[0x0]
8000319a:	3b 50       	mov	r0,-75
8000319c:	80 00       	ld.sh	r0,r0[0x0]
8000319e:	2b c8       	sub	r8,-68
800031a0:	80 00       	ld.sh	r0,r0[0x0]
800031a2:	3b a0       	mov	r0,-70
800031a4:	80 00       	ld.sh	r0,r0[0x0]
800031a6:	25 38       	sub	r8,83
800031a8:	80 00       	ld.sh	r0,r0[0x0]
800031aa:	3b 38       	mov	r8,-77
800031ac:	80 00       	ld.sh	r0,r0[0x0]
800031ae:	24 a8       	sub	r8,74
800031b0:	80 00       	ld.sh	r0,r0[0x0]
800031b2:	24 b8       	sub	r8,75
800031b4:	80 00       	ld.sh	r0,r0[0x0]
800031b6:	23 f8       	sub	r8,63
800031b8:	80 00       	ld.sh	r0,r0[0x0]
800031ba:	2e 44       	sub	r4,-28
800031bc:	80 00       	ld.sh	r0,r0[0x0]
800031be:	23 78       	sub	r8,55
800031c0:	80 00       	ld.sh	r0,r0[0x0]
800031c2:	2e 28       	sub	r8,-30
800031c4:	80 00       	ld.sh	r0,r0[0x0]
800031c6:	2d d8       	sub	r8,-35
800031c8:	80 00       	ld.sh	r0,r0[0x0]
800031ca:	2d 30       	sub	r0,-45
800031cc:	80 00       	ld.sh	r0,r0[0x0]
800031ce:	24 98       	sub	r8,73
800031d0:	80 00       	ld.sh	r0,r0[0x0]
800031d2:	3b b8       	mov	r8,-69
800031d4:	80 00       	ld.sh	r0,r0[0x0]
800031d6:	28 fc       	sub	r12,-113
800031d8:	80 00       	ld.sh	r0,r0[0x0]
800031da:	29 f0       	sub	r0,-97
800031dc:	80 00       	ld.sh	r0,r0[0x0]
800031de:	29 bc       	sub	r12,-101
800031e0:	80 00       	ld.sh	r0,r0[0x0]
800031e2:	3b 9c       	mov	r12,-71
800031e4:	80 00       	ld.sh	r0,r0[0x0]
800031e6:	2a 24       	sub	r4,-94
800031e8:	80 00       	ld.sh	r0,r0[0x0]
800031ea:	29 98       	sub	r8,-103
800031ec:	80 00       	ld.sh	r0,r0[0x0]
800031ee:	3b 30       	mov	r0,-77
800031f0:	00 00       	add	r0,r0
800031f2:	8d 44       	st.w	r6[0x10],r4
800031f4:	00 00       	add	r0,r0
800031f6:	ed 44 00 00 	st.w	r6[0],r4
800031fa:	00 0c       	add	r12,r0
800031fc:	00 00       	add	r0,r0
800031fe:	ad 44       	asr	r4,0xc
80003200:	80 00       	ld.sh	r0,r0[0x0]
80003202:	34 a8       	mov	r8,74
80003204:	80 00       	ld.sh	r0,r0[0x0]
80003206:	32 18       	mov	r8,33
80003208:	80 00       	ld.sh	r0,r0[0x0]
8000320a:	2d 26       	sub	r6,-46
8000320c:	80 00       	ld.sh	r0,r0[0x0]
8000320e:	2b 9c       	sub	r12,-71
80003210:	80 00       	ld.sh	r0,r0[0x0]
80003212:	3b 60       	mov	r0,-74

80003214 <dsp16_vect_complex_abs_kernel_x0>:
80003214:	5e fc       	retal	r12
80003216:	d7 03       	nop

80003218 <dsp16_vect_complex_abs>:
80003218:	eb cd 40 fe 	pushm	r1-r7,lr
8000321c:	14 93       	mov	r3,r10
8000321e:	18 91       	mov	r1,r12
80003220:	16 92       	mov	r2,r11
80003222:	f4 c4 00 03 	sub	r4,r10,3
80003226:	58 04       	cp.w	r4,0
80003228:	e0 8a 00 6d 	brle	80003302 <dsp16_vect_complex_abs+0xea>
8000322c:	16 97       	mov	r7,r11
8000322e:	18 96       	mov	r6,r12
80003230:	30 05       	mov	r5,0
80003232:	0f 89       	ld.ub	r9,r7[0x0]
80003234:	0f 98       	ld.ub	r8,r7[0x1]
80003236:	f1 e9 10 88 	or	r8,r8,r9<<0x8
8000323a:	0f a9       	ld.ub	r9,r7[0x2]
8000323c:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
80003240:	af 58       	asr	r8,0xf
80003242:	0f bc       	ld.ub	r12,r7[0x3]
80003244:	f9 e9 10 8c 	or	r12,r12,r9<<0x8
80003248:	f8 0c 07 8c 	mulhh.w	r12,r12:b,r12:b
8000324c:	af 5c       	asr	r12,0xf
8000324e:	10 0c       	add	r12,r8
80003250:	5c 8c       	casts.h	r12
80003252:	cd fc       	rcall	80003410 <dsp16_op_sqrt>
80003254:	ee ca ff fc 	sub	r10,r7,-4
80003258:	ac 0c       	st.h	r6[0x0],r12
8000325a:	15 89       	ld.ub	r9,r10[0x0]
8000325c:	15 98       	ld.ub	r8,r10[0x1]
8000325e:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80003262:	15 a9       	ld.ub	r9,r10[0x2]
80003264:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
80003268:	af 58       	asr	r8,0xf
8000326a:	15 bc       	ld.ub	r12,r10[0x3]
8000326c:	f9 e9 10 8c 	or	r12,r12,r9<<0x8
80003270:	f8 0c 07 8c 	mulhh.w	r12,r12:b,r12:b
80003274:	af 5c       	asr	r12,0xf
80003276:	10 0c       	add	r12,r8
80003278:	5c 8c       	casts.h	r12
8000327a:	cc bc       	rcall	80003410 <dsp16_op_sqrt>
8000327c:	ee ca ff f8 	sub	r10,r7,-8
80003280:	ac 1c       	st.h	r6[0x2],r12
80003282:	15 89       	ld.ub	r9,r10[0x0]
80003284:	15 98       	ld.ub	r8,r10[0x1]
80003286:	f1 e9 10 88 	or	r8,r8,r9<<0x8
8000328a:	15 a9       	ld.ub	r9,r10[0x2]
8000328c:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
80003290:	af 58       	asr	r8,0xf
80003292:	15 bc       	ld.ub	r12,r10[0x3]
80003294:	f9 e9 10 8c 	or	r12,r12,r9<<0x8
80003298:	f8 0c 07 8c 	mulhh.w	r12,r12:b,r12:b
8000329c:	af 5c       	asr	r12,0xf
8000329e:	10 0c       	add	r12,r8
800032a0:	5c 8c       	casts.h	r12
800032a2:	cb 7c       	rcall	80003410 <dsp16_op_sqrt>
800032a4:	ee ca ff f4 	sub	r10,r7,-12
800032a8:	ac 2c       	st.h	r6[0x4],r12
800032aa:	15 89       	ld.ub	r9,r10[0x0]
800032ac:	15 98       	ld.ub	r8,r10[0x1]
800032ae:	f1 e9 10 88 	or	r8,r8,r9<<0x8
800032b2:	15 a9       	ld.ub	r9,r10[0x2]
800032b4:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
800032b8:	af 58       	asr	r8,0xf
800032ba:	15 bc       	ld.ub	r12,r10[0x3]
800032bc:	f9 e9 10 8c 	or	r12,r12,r9<<0x8
800032c0:	f8 0c 07 8c 	mulhh.w	r12,r12:b,r12:b
800032c4:	af 5c       	asr	r12,0xf
800032c6:	10 0c       	add	r12,r8
800032c8:	5c 8c       	casts.h	r12
800032ca:	ca 3c       	rcall	80003410 <dsp16_op_sqrt>
800032cc:	ac 3c       	st.h	r6[0x6],r12
800032ce:	2f c5       	sub	r5,-4
800032d0:	2f 07       	sub	r7,-16
800032d2:	2f 86       	sub	r6,-8
800032d4:	0a 34       	cp.w	r4,r5
800032d6:	fe 99 ff ae 	brgt	80003232 <dsp16_vect_complex_abs+0x1a>
800032da:	e6 c8 00 04 	sub	r8,r3,4
800032de:	a3 88       	lsr	r8,0x2
800032e0:	2f f8       	sub	r8,-1
800032e2:	f0 09 15 03 	lsl	r9,r8,0x3
800032e6:	a5 68       	lsl	r8,0x4
800032e8:	e4 08 00 0b 	add	r11,r2,r8
800032ec:	e2 09 00 0c 	add	r12,r1,r9
800032f0:	f1 d3 c0 02 	bfextu	r8,r3,0x0,0x2
800032f4:	fe c9 f7 34 	sub	r9,pc,-2252
800032f8:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
800032fc:	5d 1a       	icall	r10
800032fe:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
80003302:	30 08       	mov	r8,0
80003304:	10 99       	mov	r9,r8
80003306:	cf 1b       	rjmp	800032e8 <dsp16_vect_complex_abs+0xd0>

80003308 <dsp16_vect_complex_abs_kernel_x3>:
80003308:	eb cd 40 60 	pushm	r5-r6,lr
8000330c:	17 89       	ld.ub	r9,r11[0x0]
8000330e:	17 98       	ld.ub	r8,r11[0x1]
80003310:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80003314:	17 a9       	ld.ub	r9,r11[0x2]
80003316:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
8000331a:	af 58       	asr	r8,0xf
8000331c:	16 96       	mov	r6,r11
8000331e:	18 95       	mov	r5,r12
80003320:	17 bc       	ld.ub	r12,r11[0x3]
80003322:	f9 e9 10 8c 	or	r12,r12,r9<<0x8
80003326:	f8 0c 07 8c 	mulhh.w	r12,r12:b,r12:b
8000332a:	af 5c       	asr	r12,0xf
8000332c:	10 0c       	add	r12,r8
8000332e:	5c 8c       	casts.h	r12
80003330:	c7 0c       	rcall	80003410 <dsp16_op_sqrt>
80003332:	ec ca ff fc 	sub	r10,r6,-4
80003336:	aa 0c       	st.h	r5[0x0],r12
80003338:	15 89       	ld.ub	r9,r10[0x0]
8000333a:	15 98       	ld.ub	r8,r10[0x1]
8000333c:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80003340:	15 a9       	ld.ub	r9,r10[0x2]
80003342:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
80003346:	af 58       	asr	r8,0xf
80003348:	15 bc       	ld.ub	r12,r10[0x3]
8000334a:	f9 e9 10 8c 	or	r12,r12,r9<<0x8
8000334e:	f8 0c 07 8c 	mulhh.w	r12,r12:b,r12:b
80003352:	af 5c       	asr	r12,0xf
80003354:	10 0c       	add	r12,r8
80003356:	5c 8c       	casts.h	r12
80003358:	c5 cc       	rcall	80003410 <dsp16_op_sqrt>
8000335a:	2f 86       	sub	r6,-8
8000335c:	aa 1c       	st.h	r5[0x2],r12
8000335e:	0d 89       	ld.ub	r9,r6[0x0]
80003360:	0d 98       	ld.ub	r8,r6[0x1]
80003362:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80003366:	0d a9       	ld.ub	r9,r6[0x2]
80003368:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
8000336c:	af 58       	asr	r8,0xf
8000336e:	0d bc       	ld.ub	r12,r6[0x3]
80003370:	f9 e9 10 8c 	or	r12,r12,r9<<0x8
80003374:	f8 0c 07 8c 	mulhh.w	r12,r12:b,r12:b
80003378:	af 5c       	asr	r12,0xf
8000337a:	10 0c       	add	r12,r8
8000337c:	5c 8c       	casts.h	r12
8000337e:	c4 9c       	rcall	80003410 <dsp16_op_sqrt>
80003380:	aa 2c       	st.h	r5[0x4],r12
80003382:	e3 cd 80 60 	ldm	sp++,r5-r6,pc
80003386:	d7 03       	nop

80003388 <dsp16_vect_complex_abs_kernel_x2>:
80003388:	eb cd 40 60 	pushm	r5-r6,lr
8000338c:	17 89       	ld.ub	r9,r11[0x0]
8000338e:	17 98       	ld.ub	r8,r11[0x1]
80003390:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80003394:	17 a9       	ld.ub	r9,r11[0x2]
80003396:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
8000339a:	af 58       	asr	r8,0xf
8000339c:	16 96       	mov	r6,r11
8000339e:	18 95       	mov	r5,r12
800033a0:	17 bc       	ld.ub	r12,r11[0x3]
800033a2:	f9 e9 10 8c 	or	r12,r12,r9<<0x8
800033a6:	f8 0c 07 8c 	mulhh.w	r12,r12:b,r12:b
800033aa:	af 5c       	asr	r12,0xf
800033ac:	10 0c       	add	r12,r8
800033ae:	5c 8c       	casts.h	r12
800033b0:	c3 0c       	rcall	80003410 <dsp16_op_sqrt>
800033b2:	2f c6       	sub	r6,-4
800033b4:	aa 0c       	st.h	r5[0x0],r12
800033b6:	0d 89       	ld.ub	r9,r6[0x0]
800033b8:	0d 98       	ld.ub	r8,r6[0x1]
800033ba:	f1 e9 10 88 	or	r8,r8,r9<<0x8
800033be:	0d a9       	ld.ub	r9,r6[0x2]
800033c0:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
800033c4:	af 58       	asr	r8,0xf
800033c6:	0d bc       	ld.ub	r12,r6[0x3]
800033c8:	f9 e9 10 8c 	or	r12,r12,r9<<0x8
800033cc:	f8 0c 07 8c 	mulhh.w	r12,r12:b,r12:b
800033d0:	af 5c       	asr	r12,0xf
800033d2:	10 0c       	add	r12,r8
800033d4:	5c 8c       	casts.h	r12
800033d6:	c1 dc       	rcall	80003410 <dsp16_op_sqrt>
800033d8:	aa 1c       	st.h	r5[0x2],r12
800033da:	e3 cd 80 60 	ldm	sp++,r5-r6,pc
800033de:	d7 03       	nop

800033e0 <dsp16_vect_complex_abs_kernel_x1>:
800033e0:	eb cd 40 40 	pushm	r6,lr
800033e4:	17 89       	ld.ub	r9,r11[0x0]
800033e6:	17 98       	ld.ub	r8,r11[0x1]
800033e8:	f1 e9 10 88 	or	r8,r8,r9<<0x8
800033ec:	17 a9       	ld.ub	r9,r11[0x2]
800033ee:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
800033f2:	af 58       	asr	r8,0xf
800033f4:	18 96       	mov	r6,r12
800033f6:	17 bc       	ld.ub	r12,r11[0x3]
800033f8:	f9 e9 10 8c 	or	r12,r12,r9<<0x8
800033fc:	f8 0c 07 8c 	mulhh.w	r12,r12:b,r12:b
80003400:	af 5c       	asr	r12,0xf
80003402:	10 0c       	add	r12,r8
80003404:	5c 8c       	casts.h	r12
80003406:	c0 5c       	rcall	80003410 <dsp16_op_sqrt>
80003408:	ac 0c       	st.h	r6[0x0],r12
8000340a:	e3 cd 80 40 	ldm	sp++,r6,pc
8000340e:	d7 03       	nop

80003410 <dsp16_op_sqrt>:
80003410:	d4 11       	pushm	r0-r3,lr
80003412:	58 0c       	cp.w	r12,0
80003414:	c4 75       	brlt	800034a2 <__dsp16_sqrt_end_err>
80003416:	f8 00 12 00 	clz	r0,r12
8000341a:	e0 00 16 01 	lsr	r0,r0,0x1
8000341e:	e0 c0 00 01 	sub	r0,r0,1
80003422:	30 11       	mov	r1,1
80003424:	e2 00 09 40 	lsl	r0,r1,r0
80003428:	e0 62 c0 00 	mov	r2,49152
8000342c:	e0 00 02 41 	mul	r1,r0,r0
80003430:	f8 01 02 41 	mul	r1,r12,r1
80003434:	e2 01 16 10 	lsr	r1,r1,0x10
80003438:	e4 01 01 01 	sub	r1,r2,r1
8000343c:	e0 01 02 40 	mul	r0,r0,r1
80003440:	e0 00 16 0f 	lsr	r0,r0,0xf
80003444:	e0 00 02 41 	mul	r1,r0,r0
80003448:	f8 01 02 41 	mul	r1,r12,r1
8000344c:	e2 01 16 10 	lsr	r1,r1,0x10
80003450:	e4 01 01 01 	sub	r1,r2,r1
80003454:	e0 01 02 40 	mul	r0,r0,r1
80003458:	e0 00 16 0f 	lsr	r0,r0,0xf
8000345c:	e0 00 02 41 	mul	r1,r0,r0
80003460:	f8 01 02 41 	mul	r1,r12,r1
80003464:	e2 01 16 10 	lsr	r1,r1,0x10
80003468:	e4 01 01 01 	sub	r1,r2,r1
8000346c:	e0 01 02 40 	mul	r0,r0,r1
80003470:	e0 00 16 0f 	lsr	r0,r0,0xf
80003474:	e0 00 02 41 	mul	r1,r0,r0
80003478:	f8 01 02 41 	mul	r1,r12,r1
8000347c:	e2 01 16 10 	lsr	r1,r1,0x10
80003480:	e4 01 01 01 	sub	r1,r2,r1
80003484:	e0 01 02 40 	mul	r0,r0,r1
80003488:	e0 00 16 0f 	lsr	r0,r0,0xf
8000348c:	e0 62 5a 82 	mov	r2,23170
80003490:	f8 02 02 4c 	mul	r12,r12,r2
80003494:	f8 0c 16 0f 	lsr	r12,r12,0xf
80003498:	e0 0c 02 4c 	mul	r12,r0,r12
8000349c:	f8 0c 16 07 	lsr	r12,r12,0x7

800034a0 <__dsp16_sqrt_end_fct>:
800034a0:	d8 12       	popm	r0-r3,pc

800034a2 <__dsp16_sqrt_end_err>:
800034a2:	30 0c       	mov	r12,0
800034a4:	d8 12       	popm	r0-r3,pc
800034a6:	d7 03       	nop

800034a8 <dsp16_trans_realcomplexfft>:
800034a8:	d4 31       	pushm	r0-r7,lr
800034aa:	20 9d       	sub	sp,36
800034ac:	f4 c0 00 02 	sub	r0,r10,2
800034b0:	50 00       	stdsp	sp[0x0],r0
800034b2:	30 11       	mov	r1,1
800034b4:	e2 0a 09 42 	lsl	r2,r1,r10
800034b8:	18 94       	mov	r4,r12
800034ba:	50 14       	stdsp	sp[0x4],r4
800034bc:	e8 02 00 20 	add	r0,r4,r2<<0x2
800034c0:	50 20       	stdsp	sp[0x8],r0
800034c2:	e0 61 01 00 	mov	r1,256
800034c6:	50 51       	stdsp	sp[0x14],r1
800034c8:	e4 0c 14 02 	asr	r12,r2,0x2
800034cc:	30 01       	mov	r1,0
800034ce:	30 03       	mov	r3,0
800034d0:	f4 02 11 20 	rsub	r2,r10,32

800034d4 <__loop_init>:
800034d4:	e2 02 09 49 	lsl	r9,r1,r2
800034d8:	5c 99       	brev	r9
800034da:	f6 09 04 15 	ld.sh	r5,r11[r9<<0x1]
800034de:	18 09       	add	r9,r12
800034e0:	f6 09 04 16 	ld.sh	r6,r11[r9<<0x1]
800034e4:	18 09       	add	r9,r12
800034e6:	f6 09 04 17 	ld.sh	r7,r11[r9<<0x1]
800034ea:	18 09       	add	r9,r12
800034ec:	f6 09 04 18 	ld.sh	r8,r11[r9<<0x1]
800034f0:	a3 45       	asr	r5,0x2
800034f2:	a3 46       	asr	r6,0x2
800034f4:	a3 47       	asr	r7,0x2
800034f6:	a3 48       	asr	r8,0x2
800034f8:	ea 07 00 09 	add	r9,r5,r7
800034fc:	ec 08 00 0a 	add	r10,r6,r8
80003500:	f2 0a 00 0e 	add	lr,r9,r10
80003504:	fd e3 c0 04 	sthh.w	r4[0x0],lr:b,r3:b
80003508:	f2 0a 01 0e 	sub	lr,r9,r10
8000350c:	fd e3 c0 24 	sthh.w	r4[0x8],lr:b,r3:b
80003510:	ea 07 01 0e 	sub	lr,r5,r7
80003514:	f0 06 01 05 	sub	r5,r8,r6
80003518:	fd e5 c0 14 	sthh.w	r4[0x4],lr:b,r5:b
8000351c:	ec 08 01 07 	sub	r7,r6,r8
80003520:	fd e7 c0 34 	sthh.w	r4[0xc],lr:b,r7:b
80003524:	e2 c1 ff fc 	sub	r1,r1,-4
80003528:	e8 c4 ff f0 	sub	r4,r4,-16
8000352c:	08 30       	cp.w	r0,r4
8000352e:	fe 99 ff d3 	brgt	800034d4 <__loop_init>
80003532:	40 14       	lddsp	r4,sp[0x4]
80003534:	30 41       	mov	r1,4
80003536:	50 61       	stdsp	sp[0x18],r1

80003538 <__loop_stage>:
80003538:	40 61       	lddsp	r1,sp[0x18]
8000353a:	e2 01 15 02 	lsl	r1,r1,0x2
8000353e:	50 61       	stdsp	sp[0x18],r1
80003540:	30 00       	mov	r0,0
80003542:	50 40       	stdsp	sp[0x10],r0
80003544:	40 14       	lddsp	r4,sp[0x4]
80003546:	e2 02 10 03 	mul	r2,r1,3

8000354a <__loop_r1>:
8000354a:	68 05       	ld.w	r5,r4[0x0]
8000354c:	e8 01 03 16 	ld.w	r6,r4[r1<<0x1]
80003550:	e8 02 03 08 	ld.w	r8,r4[r2]
80003554:	e8 01 03 07 	ld.w	r7,r4[r1]
80003558:	ea 07 0e 39 	addhh.w	r9,r5:t,r7:t
8000355c:	ec 08 0e 3a 	addhh.w	r10,r6:t,r8:t
80003560:	ea 07 0e 0b 	addhh.w	r11,r5:b,r7:b
80003564:	ec 08 0e 0c 	addhh.w	r12,r6:b,r8:b
80003568:	f2 0a 00 0e 	add	lr,r9,r10
8000356c:	f6 0c 00 03 	add	r3,r11,r12
80003570:	a3 4e       	asr	lr,0x2
80003572:	a3 43       	asr	r3,0x2
80003574:	fd e3 c0 04 	sthh.w	r4[0x0],lr:b,r3:b
80003578:	f2 0a 01 0e 	sub	lr,r9,r10
8000357c:	f6 0c 01 00 	sub	r0,r11,r12
80003580:	a3 4e       	asr	lr,0x2
80003582:	a3 40       	asr	r0,0x2
80003584:	fd e0 81 14 	sthh.w	r4[r1<<0x1],lr:b,r0:b
80003588:	ea 07 0f 39 	subhh.w	r9,r5:t,r7:t
8000358c:	ec 08 0f 3a 	subhh.w	r10,r6:t,r8:t
80003590:	ea 07 0f 0b 	subhh.w	r11,r5:b,r7:b
80003594:	ec 08 0f 0c 	subhh.w	r12,r6:b,r8:b
80003598:	f2 0c 00 0e 	add	lr,r9,r12
8000359c:	f6 0a 01 00 	sub	r0,r11,r10
800035a0:	a3 4e       	asr	lr,0x2
800035a2:	a3 40       	asr	r0,0x2
800035a4:	fd e0 81 04 	sthh.w	r4[r1],lr:b,r0:b
800035a8:	f2 0c 01 0e 	sub	lr,r9,r12
800035ac:	f6 0a 00 00 	add	r0,r11,r10
800035b0:	a3 4e       	asr	lr,0x2
800035b2:	a3 40       	asr	r0,0x2
800035b4:	fd e0 82 04 	sthh.w	r4[r2],lr:b,r0:b
800035b8:	e8 01 00 24 	add	r4,r4,r1<<0x2
800035bc:	40 28       	lddsp	r8,sp[0x8]
800035be:	08 38       	cp.w	r8,r4
800035c0:	fe 99 ff c5 	brgt	8000354a <__loop_r1>
800035c4:	58 41       	cp.w	r1,4
800035c6:	e0 88 00 74 	brls	800036ae <__loop_stage_end>
800035ca:	30 49       	mov	r9,4
800035cc:	50 39       	stdsp	sp[0xc],r9

800035ce <__loop_j>:
800035ce:	40 14       	lddsp	r4,sp[0x4]
800035d0:	12 04       	add	r4,r9
800035d2:	40 51       	lddsp	r1,sp[0x14]
800035d4:	40 49       	lddsp	r9,sp[0x10]
800035d6:	02 09       	add	r9,r1
800035d8:	50 49       	stdsp	sp[0x10],r9
800035da:	e0 61 08 1c 	mov	r1,2076
800035de:	ea 11 00 00 	orh	r1,0x0
800035e2:	e2 09 03 00 	ld.w	r0,r1[r9]
800035e6:	e0 61 00 1c 	mov	r1,28
800035ea:	ea 11 00 00 	orh	r1,0x0
800035ee:	e2 09 02 16 	ld.d	r6,r1[r9<<0x1]
800035f2:	fa e7 00 1c 	st.d	sp[28],r6
800035f6:	40 61       	lddsp	r1,sp[0x18]

800035f8 <__loop_r2>:
800035f8:	e8 01 03 17 	ld.w	r7,r4[r1<<0x1]
800035fc:	ee 00 01 88 	mulnhh.w	r8,r7:b,r0:b
80003600:	ee 00 04 b8 	machh.w	r8,r7:t,r0:t
80003604:	ee 00 07 a9 	mulhh.w	r9,r7:t,r0:b
80003608:	ee 00 04 99 	machh.w	r9,r7:b,r0:t
8000360c:	fa e6 00 1c 	ld.d	r6,sp[28]
80003610:	e8 02 03 03 	ld.w	r3,r4[r2]
80003614:	e6 06 01 8c 	mulnhh.w	r12,r3:b,r6:b
80003618:	e6 06 04 bc 	machh.w	r12,r3:t,r6:t
8000361c:	e6 06 07 ae 	mulhh.w	lr,r3:t,r6:b
80003620:	e6 06 04 9e 	machh.w	lr,r3:b,r6:t
80003624:	e8 01 03 03 	ld.w	r3,r4[r1]
80003628:	e6 07 01 8a 	mulnhh.w	r10,r3:b,r7:b
8000362c:	e6 07 04 ba 	machh.w	r10,r3:t,r7:t
80003630:	e6 07 07 ab 	mulhh.w	r11,r3:t,r7:b
80003634:	e6 07 04 9b 	machh.w	r11,r3:b,r7:t
80003638:	68 05       	ld.w	r5,r4[0x0]
8000363a:	a3 45       	asr	r5,0x2
8000363c:	e7 d5 b0 0e 	bfexts	r3,r5,0x0,0xe
80003640:	eb d3 d0 10 	bfins	r5,r3,0x0,0x10
80003644:	f0 0c 00 03 	add	r3,r8,r12
80003648:	f0 0c 01 0c 	sub	r12,r8,r12
8000364c:	f2 0e 00 06 	add	r6,r9,lr
80003650:	f2 0e 01 0e 	sub	lr,r9,lr
80003654:	ea 0a 0e 38 	addhh.w	r8,r5:t,r10:t
80003658:	ea 0a 0f 3a 	subhh.w	r10,r5:t,r10:t
8000365c:	ea 0b 0e 19 	addhh.w	r9,r5:b,r11:t
80003660:	ea 0b 0f 1b 	subhh.w	r11,r5:b,r11:t
80003664:	f0 03 0e 17 	addhh.w	r7,r8:b,r3:t
80003668:	f2 06 0e 15 	addhh.w	r5,r9:b,r6:t
8000366c:	ef e5 c0 04 	sthh.w	r4[0x0],r7:b,r5:b
80003670:	f0 03 0f 17 	subhh.w	r7,r8:b,r3:t
80003674:	f2 06 0f 15 	subhh.w	r5,r9:b,r6:t
80003678:	ef e5 81 14 	sthh.w	r4[r1<<0x1],r7:b,r5:b
8000367c:	f4 0e 0e 17 	addhh.w	r7,r10:b,lr:t
80003680:	f6 0c 0f 15 	subhh.w	r5,r11:b,r12:t
80003684:	ef e5 81 04 	sthh.w	r4[r1],r7:b,r5:b
80003688:	f4 0e 0f 17 	subhh.w	r7,r10:b,lr:t
8000368c:	f6 0c 0e 15 	addhh.w	r5,r11:b,r12:t
80003690:	ef e5 82 04 	sthh.w	r4[r2],r7:b,r5:b
80003694:	e8 01 00 24 	add	r4,r4,r1<<0x2
80003698:	40 28       	lddsp	r8,sp[0x8]
8000369a:	08 38       	cp.w	r8,r4
8000369c:	fe 99 ff ae 	brgt	800035f8 <__loop_r2>
800036a0:	40 39       	lddsp	r9,sp[0xc]
800036a2:	2f c9       	sub	r9,-4
800036a4:	50 39       	stdsp	sp[0xc],r9
800036a6:	40 65       	lddsp	r5,sp[0x18]
800036a8:	12 35       	cp.w	r5,r9
800036aa:	fe 99 ff 92 	brgt	800035ce <__loop_j>

800036ae <__loop_stage_end>:
800036ae:	40 51       	lddsp	r1,sp[0x14]
800036b0:	e2 01 16 02 	lsr	r1,r1,0x2
800036b4:	50 51       	stdsp	sp[0x14],r1
800036b6:	40 01       	lddsp	r1,sp[0x0]
800036b8:	20 21       	sub	r1,2
800036ba:	50 01       	stdsp	sp[0x0],r1
800036bc:	fe 99 ff 3e 	brgt	80003538 <__loop_stage>

800036c0 <__address_end>:
800036c0:	2f 7d       	sub	sp,-36
800036c2:	d8 32       	popm	r0-r7,pc
800036c4:	c0 28       	rjmp	800036c8 <__address_end+0x8>
800036c6:	d7 03       	nop

Disassembly of section .exception:

80003800 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80003800:	c0 08       	rjmp	80003800 <_evba>
	...

80003804 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80003804:	c0 08       	rjmp	80003804 <_handle_TLB_Multiple_Hit>
	...

80003808 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80003808:	c0 08       	rjmp	80003808 <_handle_Bus_Error_Data_Fetch>
	...

8000380c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000380c:	c0 08       	rjmp	8000380c <_handle_Bus_Error_Instruction_Fetch>
	...

80003810 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80003810:	c0 08       	rjmp	80003810 <_handle_NMI>
	...

80003814 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80003814:	c0 08       	rjmp	80003814 <_handle_Instruction_Address>
	...

80003818 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80003818:	c0 08       	rjmp	80003818 <_handle_ITLB_Protection>
	...

8000381c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000381c:	c0 08       	rjmp	8000381c <_handle_Breakpoint>
	...

80003820 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80003820:	c0 08       	rjmp	80003820 <_handle_Illegal_Opcode>
	...

80003824 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80003824:	c0 08       	rjmp	80003824 <_handle_Unimplemented_Instruction>
	...

80003828 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80003828:	c0 08       	rjmp	80003828 <_handle_Privilege_Violation>
	...

8000382c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000382c:	c0 08       	rjmp	8000382c <_handle_Floating_Point>
	...

80003830 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80003830:	c0 08       	rjmp	80003830 <_handle_Coprocessor_Absent>
	...

80003834 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80003834:	c0 08       	rjmp	80003834 <_handle_Data_Address_Read>
	...

80003838 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80003838:	c0 08       	rjmp	80003838 <_handle_Data_Address_Write>
	...

8000383c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000383c:	c0 08       	rjmp	8000383c <_handle_DTLB_Protection_Read>
	...

80003840 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80003840:	c0 08       	rjmp	80003840 <_handle_DTLB_Protection_Write>
	...

80003844 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80003844:	c0 08       	rjmp	80003844 <_handle_DTLB_Modified>
	...

80003850 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80003850:	c0 08       	rjmp	80003850 <_handle_ITLB_Miss>
	...

80003860 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80003860:	c0 08       	rjmp	80003860 <_handle_DTLB_Miss_Read>
	...

80003870 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80003870:	c0 08       	rjmp	80003870 <_handle_DTLB_Miss_Write>
	...

80003900 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80003900:	c0 08       	rjmp	80003900 <_handle_Supervisor_Call>
80003902:	d7 03       	nop

80003904 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003904:	30 0c       	mov	r12,0
80003906:	fe b0 f5 a3 	rcall	8000244c <_get_interrupt_handler>
8000390a:	58 0c       	cp.w	r12,0
8000390c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80003910:	d6 03       	rete

80003912 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003912:	30 1c       	mov	r12,1
80003914:	fe b0 f5 9c 	rcall	8000244c <_get_interrupt_handler>
80003918:	58 0c       	cp.w	r12,0
8000391a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000391e:	d6 03       	rete

80003920 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003920:	30 2c       	mov	r12,2
80003922:	fe b0 f5 95 	rcall	8000244c <_get_interrupt_handler>
80003926:	58 0c       	cp.w	r12,0
80003928:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000392c:	d6 03       	rete

8000392e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000392e:	30 3c       	mov	r12,3
80003930:	fe b0 f5 8e 	rcall	8000244c <_get_interrupt_handler>
80003934:	58 0c       	cp.w	r12,0
80003936:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000393a:	d6 03       	rete
8000393c:	d7 03       	nop
8000393e:	d7 03       	nop
80003940:	d7 03       	nop
80003942:	d7 03       	nop
80003944:	d7 03       	nop
80003946:	d7 03       	nop
80003948:	d7 03       	nop
8000394a:	d7 03       	nop
8000394c:	d7 03       	nop
8000394e:	d7 03       	nop
80003950:	d7 03       	nop
80003952:	d7 03       	nop
80003954:	d7 03       	nop
80003956:	d7 03       	nop
80003958:	d7 03       	nop
8000395a:	d7 03       	nop
8000395c:	d7 03       	nop
8000395e:	d7 03       	nop
80003960:	d7 03       	nop
80003962:	d7 03       	nop
80003964:	d7 03       	nop
80003966:	d7 03       	nop
80003968:	d7 03       	nop
8000396a:	d7 03       	nop
8000396c:	d7 03       	nop
8000396e:	d7 03       	nop
80003970:	d7 03       	nop
80003972:	d7 03       	nop
80003974:	d7 03       	nop
80003976:	d7 03       	nop
80003978:	d7 03       	nop
8000397a:	d7 03       	nop
8000397c:	d7 03       	nop
8000397e:	d7 03       	nop
80003980:	d7 03       	nop
80003982:	d7 03       	nop
80003984:	d7 03       	nop
80003986:	d7 03       	nop
80003988:	d7 03       	nop
8000398a:	d7 03       	nop
8000398c:	d7 03       	nop
8000398e:	d7 03       	nop
80003990:	d7 03       	nop
80003992:	d7 03       	nop
80003994:	d7 03       	nop
80003996:	d7 03       	nop
80003998:	d7 03       	nop
8000399a:	d7 03       	nop
8000399c:	d7 03       	nop
8000399e:	d7 03       	nop
800039a0:	d7 03       	nop
800039a2:	d7 03       	nop
800039a4:	d7 03       	nop
800039a6:	d7 03       	nop
800039a8:	d7 03       	nop
800039aa:	d7 03       	nop
800039ac:	d7 03       	nop
800039ae:	d7 03       	nop
800039b0:	d7 03       	nop
800039b2:	d7 03       	nop
800039b4:	d7 03       	nop
800039b6:	d7 03       	nop
800039b8:	d7 03       	nop
800039ba:	d7 03       	nop
800039bc:	d7 03       	nop
800039be:	d7 03       	nop
800039c0:	d7 03       	nop
800039c2:	d7 03       	nop
800039c4:	d7 03       	nop
800039c6:	d7 03       	nop
800039c8:	d7 03       	nop
800039ca:	d7 03       	nop
800039cc:	d7 03       	nop
800039ce:	d7 03       	nop
800039d0:	d7 03       	nop
800039d2:	d7 03       	nop
800039d4:	d7 03       	nop
800039d6:	d7 03       	nop
800039d8:	d7 03       	nop
800039da:	d7 03       	nop
800039dc:	d7 03       	nop
800039de:	d7 03       	nop
800039e0:	d7 03       	nop
800039e2:	d7 03       	nop
800039e4:	d7 03       	nop
800039e6:	d7 03       	nop
800039e8:	d7 03       	nop
800039ea:	d7 03       	nop
800039ec:	d7 03       	nop
800039ee:	d7 03       	nop
800039f0:	d7 03       	nop
800039f2:	d7 03       	nop
800039f4:	d7 03       	nop
800039f6:	d7 03       	nop
800039f8:	d7 03       	nop
800039fa:	d7 03       	nop
800039fc:	d7 03       	nop
800039fe:	d7 03       	nop
